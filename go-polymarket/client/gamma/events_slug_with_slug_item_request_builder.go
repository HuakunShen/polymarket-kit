// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package gamma

import (
    "context"
    i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f "github.com/microsoft/kiota-abstractions-go"
)

// EventsSlugWithSlugItemRequestBuilder builds and executes requests for operations under \gamma\events\slug\{slug}
type EventsSlugWithSlugItemRequestBuilder struct {
    i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.BaseRequestBuilder
}
// EventsSlugWithSlugItemRequestBuilderGetQueryParameters retrieve a specific event by its slug
type EventsSlugWithSlugItemRequestBuilderGetQueryParameters struct {
    Include_chat *bool `uriparametername:"include_chat"`
    Include_template *bool `uriparametername:"include_template"`
}
// EventsSlugWithSlugItemRequestBuilderGetRequestConfiguration configuration for the request such as headers, query parameters, and middleware options.
type EventsSlugWithSlugItemRequestBuilderGetRequestConfiguration struct {
    // Request headers
    Headers *i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.RequestHeaders
    // Request options
    Options []i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.RequestOption
    // Request query parameters
    QueryParameters *EventsSlugWithSlugItemRequestBuilderGetQueryParameters
}
// NewEventsSlugWithSlugItemRequestBuilderInternal instantiates a new EventsSlugWithSlugItemRequestBuilder and sets the default values.
func NewEventsSlugWithSlugItemRequestBuilderInternal(pathParameters map[string]string, requestAdapter i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.RequestAdapter)(*EventsSlugWithSlugItemRequestBuilder) {
    m := &EventsSlugWithSlugItemRequestBuilder{
        BaseRequestBuilder: *i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.NewBaseRequestBuilder(requestAdapter, "{+baseurl}/gamma/events/slug/{slug}{?include_chat*,include_template*}", pathParameters),
    }
    return m
}
// NewEventsSlugWithSlugItemRequestBuilder instantiates a new EventsSlugWithSlugItemRequestBuilder and sets the default values.
func NewEventsSlugWithSlugItemRequestBuilder(rawUrl string, requestAdapter i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.RequestAdapter)(*EventsSlugWithSlugItemRequestBuilder) {
    urlParams := make(map[string]string)
    urlParams["request-raw-url"] = rawUrl
    return NewEventsSlugWithSlugItemRequestBuilderInternal(urlParams, requestAdapter)
}
// Get retrieve a specific event by its slug
// Deprecated: This method is obsolete. Use GetAsWithSlugGetResponse instead.
// returns a EventsSlugItemWithSlugResponseable when successful
// returns a EventsSlugItemWithSlug404Error error when the service returns a 404 status code
// returns a EventsSlugItemWithSlug500Error error when the service returns a 500 status code
func (m *EventsSlugWithSlugItemRequestBuilder) Get(ctx context.Context, requestConfiguration *EventsSlugWithSlugItemRequestBuilderGetRequestConfiguration)(EventsSlugItemWithSlugResponseable, error) {
    requestInfo, err := m.ToGetRequestInformation(ctx, requestConfiguration);
    if err != nil {
        return nil, err
    }
    errorMapping := i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.ErrorMappings {
        "404": CreateEventsSlugItemWithSlug404ErrorFromDiscriminatorValue,
        "500": CreateEventsSlugItemWithSlug500ErrorFromDiscriminatorValue,
    }
    res, err := m.BaseRequestBuilder.RequestAdapter.Send(ctx, requestInfo, CreateEventsSlugItemWithSlugResponseFromDiscriminatorValue, errorMapping)
    if err != nil {
        return nil, err
    }
    if res == nil {
        return nil, nil
    }
    return res.(EventsSlugItemWithSlugResponseable), nil
}
// GetAsWithSlugGetResponse retrieve a specific event by its slug
// returns a EventsSlugItemWithSlugGetResponseable when successful
// returns a EventsSlugItemWithSlug404Error error when the service returns a 404 status code
// returns a EventsSlugItemWithSlug500Error error when the service returns a 500 status code
func (m *EventsSlugWithSlugItemRequestBuilder) GetAsWithSlugGetResponse(ctx context.Context, requestConfiguration *EventsSlugWithSlugItemRequestBuilderGetRequestConfiguration)(EventsSlugItemWithSlugGetResponseable, error) {
    requestInfo, err := m.ToGetRequestInformation(ctx, requestConfiguration);
    if err != nil {
        return nil, err
    }
    errorMapping := i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.ErrorMappings {
        "404": CreateEventsSlugItemWithSlug404ErrorFromDiscriminatorValue,
        "500": CreateEventsSlugItemWithSlug500ErrorFromDiscriminatorValue,
    }
    res, err := m.BaseRequestBuilder.RequestAdapter.Send(ctx, requestInfo, CreateEventsSlugItemWithSlugGetResponseFromDiscriminatorValue, errorMapping)
    if err != nil {
        return nil, err
    }
    if res == nil {
        return nil, nil
    }
    return res.(EventsSlugItemWithSlugGetResponseable), nil
}
// ToGetRequestInformation retrieve a specific event by its slug
// returns a *RequestInformation when successful
func (m *EventsSlugWithSlugItemRequestBuilder) ToGetRequestInformation(ctx context.Context, requestConfiguration *EventsSlugWithSlugItemRequestBuilderGetRequestConfiguration)(*i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.RequestInformation, error) {
    requestInfo := i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.NewRequestInformationWithMethodAndUrlTemplateAndPathParameters(i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.GET, m.BaseRequestBuilder.UrlTemplate, m.BaseRequestBuilder.PathParameters)
    if requestConfiguration != nil {
        if requestConfiguration.QueryParameters != nil {
            requestInfo.AddQueryParameters(*(requestConfiguration.QueryParameters))
        }
        requestInfo.Headers.AddAll(requestConfiguration.Headers)
        requestInfo.AddRequestOptions(requestConfiguration.Options)
    }
    requestInfo.Headers.TryAdd("Accept", "application/json")
    return requestInfo, nil
}
// WithUrl returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
// returns a *EventsSlugWithSlugItemRequestBuilder when successful
func (m *EventsSlugWithSlugItemRequestBuilder) WithUrl(rawUrl string)(*EventsSlugWithSlugItemRequestBuilder) {
    return NewEventsSlugWithSlugItemRequestBuilder(rawUrl, m.BaseRequestBuilder.RequestAdapter);
}
