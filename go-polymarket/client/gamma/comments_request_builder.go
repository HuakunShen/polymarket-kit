// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package gamma

import (
    "context"
    i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f "github.com/microsoft/kiota-abstractions-go"
)

// CommentsRequestBuilder builds and executes requests for operations under \gamma\comments
type CommentsRequestBuilder struct {
    i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.BaseRequestBuilder
}
// CommentsRequestBuilderGetQueryParameters retrieve comments with optional filtering by entity type and ID
type CommentsRequestBuilderGetQueryParameters struct {
    Ascending *bool `uriparametername:"ascending"`
    Get_positions *bool `uriparametername:"get_positions"`
    Holders_only *bool `uriparametername:"holders_only"`
    Limit *float64 `uriparametername:"limit"`
    Offset *float64 `uriparametername:"offset"`
    Order *string `uriparametername:"order"`
    Parent_entity_id *float64 `uriparametername:"parent_entity_id"`
    Parent_entity_type *string `uriparametername:"parent_entity_type"`
}
// CommentsRequestBuilderGetRequestConfiguration configuration for the request such as headers, query parameters, and middleware options.
type CommentsRequestBuilderGetRequestConfiguration struct {
    // Request headers
    Headers *i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.RequestHeaders
    // Request options
    Options []i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.RequestOption
    // Request query parameters
    QueryParameters *CommentsRequestBuilderGetQueryParameters
}
// ById gets an item from the go-polymarket/client.gamma.comments.item collection
// returns a *CommentsCommentsItemRequestBuilder when successful
func (m *CommentsRequestBuilder) ById(id string)(*CommentsCommentsItemRequestBuilder) {
    urlTplParams := make(map[string]string)
    for idx, item := range m.BaseRequestBuilder.PathParameters {
        urlTplParams[idx] = item
    }
    if id != "" {
        urlTplParams["id"] = id
    }
    return NewCommentsCommentsItemRequestBuilderInternal(urlTplParams, m.BaseRequestBuilder.RequestAdapter)
}
// NewCommentsRequestBuilderInternal instantiates a new CommentsRequestBuilder and sets the default values.
func NewCommentsRequestBuilderInternal(pathParameters map[string]string, requestAdapter i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.RequestAdapter)(*CommentsRequestBuilder) {
    m := &CommentsRequestBuilder{
        BaseRequestBuilder: *i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.NewBaseRequestBuilder(requestAdapter, "{+baseurl}/gamma/comments{?ascending*,get_positions*,holders_only*,limit*,offset*,order*,parent_entity_id*,parent_entity_type*}", pathParameters),
    }
    return m
}
// NewCommentsRequestBuilder instantiates a new CommentsRequestBuilder and sets the default values.
func NewCommentsRequestBuilder(rawUrl string, requestAdapter i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.RequestAdapter)(*CommentsRequestBuilder) {
    urlParams := make(map[string]string)
    urlParams["request-raw-url"] = rawUrl
    return NewCommentsRequestBuilderInternal(urlParams, requestAdapter)
}
// Get retrieve comments with optional filtering by entity type and ID
// returns a []Commentsable when successful
// returns a Comments500Error error when the service returns a 500 status code
func (m *CommentsRequestBuilder) Get(ctx context.Context, requestConfiguration *CommentsRequestBuilderGetRequestConfiguration)([]Commentsable, error) {
    requestInfo, err := m.ToGetRequestInformation(ctx, requestConfiguration);
    if err != nil {
        return nil, err
    }
    errorMapping := i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.ErrorMappings {
        "500": CreateComments500ErrorFromDiscriminatorValue,
    }
    res, err := m.BaseRequestBuilder.RequestAdapter.SendCollection(ctx, requestInfo, CreateCommentsFromDiscriminatorValue, errorMapping)
    if err != nil {
        return nil, err
    }
    val := make([]Commentsable, len(res))
    for i, v := range res {
        if v != nil {
            val[i] = v.(Commentsable)
        }
    }
    return val, nil
}
// ToGetRequestInformation retrieve comments with optional filtering by entity type and ID
// returns a *RequestInformation when successful
func (m *CommentsRequestBuilder) ToGetRequestInformation(ctx context.Context, requestConfiguration *CommentsRequestBuilderGetRequestConfiguration)(*i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.RequestInformation, error) {
    requestInfo := i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.NewRequestInformationWithMethodAndUrlTemplateAndPathParameters(i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.GET, m.BaseRequestBuilder.UrlTemplate, m.BaseRequestBuilder.PathParameters)
    if requestConfiguration != nil {
        if requestConfiguration.QueryParameters != nil {
            requestInfo.AddQueryParameters(*(requestConfiguration.QueryParameters))
        }
        requestInfo.Headers.AddAll(requestConfiguration.Headers)
        requestInfo.AddRequestOptions(requestConfiguration.Options)
    }
    requestInfo.Headers.TryAdd("Accept", "application/json")
    return requestInfo, nil
}
// User_address the user_address property
// returns a *CommentsUser_addressRequestBuilder when successful
func (m *CommentsRequestBuilder) User_address()(*CommentsUser_addressRequestBuilder) {
    return NewCommentsUser_addressRequestBuilderInternal(m.BaseRequestBuilder.PathParameters, m.BaseRequestBuilder.RequestAdapter)
}
// WithUrl returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
// returns a *CommentsRequestBuilder when successful
func (m *CommentsRequestBuilder) WithUrl(rawUrl string)(*CommentsRequestBuilder) {
    return NewCommentsRequestBuilder(rawUrl, m.BaseRequestBuilder.RequestAdapter);
}
