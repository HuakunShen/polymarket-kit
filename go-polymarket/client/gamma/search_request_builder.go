// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package gamma

import (
    "context"
    i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f "github.com/microsoft/kiota-abstractions-go"
)

// SearchRequestBuilder builds and executes requests for operations under \gamma\search
type SearchRequestBuilder struct {
    i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.BaseRequestBuilder
}
// SearchRequestBuilderGetQueryParameters perform a comprehensive search across markets, events, and user profiles
type SearchRequestBuilderGetQueryParameters struct {
    Ascending *bool `uriparametername:"ascending"`
    Cache *bool `uriparametername:"cache"`
    Events_status *string `uriparametername:"events_status"`
    Events_tag []string `uriparametername:"events_tag"`
    Limit_per_type *float64 `uriparametername:"limit_per_type"`
    Page *float64 `uriparametername:"page"`
    Q *string `uriparametername:"q"`
    Sort *string `uriparametername:"sort"`
}
// SearchRequestBuilderGetRequestConfiguration configuration for the request such as headers, query parameters, and middleware options.
type SearchRequestBuilderGetRequestConfiguration struct {
    // Request headers
    Headers *i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.RequestHeaders
    // Request options
    Options []i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.RequestOption
    // Request query parameters
    QueryParameters *SearchRequestBuilderGetQueryParameters
}
// NewSearchRequestBuilderInternal instantiates a new SearchRequestBuilder and sets the default values.
func NewSearchRequestBuilderInternal(pathParameters map[string]string, requestAdapter i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.RequestAdapter)(*SearchRequestBuilder) {
    m := &SearchRequestBuilder{
        BaseRequestBuilder: *i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.NewBaseRequestBuilder(requestAdapter, "{+baseurl}/gamma/search?q={q}{&ascending*,cache*,events_status*,events_tag*,limit_per_type*,page*,sort*}", pathParameters),
    }
    return m
}
// NewSearchRequestBuilder instantiates a new SearchRequestBuilder and sets the default values.
func NewSearchRequestBuilder(rawUrl string, requestAdapter i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.RequestAdapter)(*SearchRequestBuilder) {
    urlParams := make(map[string]string)
    urlParams["request-raw-url"] = rawUrl
    return NewSearchRequestBuilderInternal(urlParams, requestAdapter)
}
// Get perform a comprehensive search across markets, events, and user profiles
// Deprecated: This method is obsolete. Use GetAsSearchGetResponse instead.
// returns a SearchResponseable when successful
// returns a Search500Error error when the service returns a 500 status code
func (m *SearchRequestBuilder) Get(ctx context.Context, requestConfiguration *SearchRequestBuilderGetRequestConfiguration)(SearchResponseable, error) {
    requestInfo, err := m.ToGetRequestInformation(ctx, requestConfiguration);
    if err != nil {
        return nil, err
    }
    errorMapping := i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.ErrorMappings {
        "500": CreateSearch500ErrorFromDiscriminatorValue,
    }
    res, err := m.BaseRequestBuilder.RequestAdapter.Send(ctx, requestInfo, CreateSearchResponseFromDiscriminatorValue, errorMapping)
    if err != nil {
        return nil, err
    }
    if res == nil {
        return nil, nil
    }
    return res.(SearchResponseable), nil
}
// GetAsSearchGetResponse perform a comprehensive search across markets, events, and user profiles
// returns a SearchGetResponseable when successful
// returns a Search500Error error when the service returns a 500 status code
func (m *SearchRequestBuilder) GetAsSearchGetResponse(ctx context.Context, requestConfiguration *SearchRequestBuilderGetRequestConfiguration)(SearchGetResponseable, error) {
    requestInfo, err := m.ToGetRequestInformation(ctx, requestConfiguration);
    if err != nil {
        return nil, err
    }
    errorMapping := i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.ErrorMappings {
        "500": CreateSearch500ErrorFromDiscriminatorValue,
    }
    res, err := m.BaseRequestBuilder.RequestAdapter.Send(ctx, requestInfo, CreateSearchGetResponseFromDiscriminatorValue, errorMapping)
    if err != nil {
        return nil, err
    }
    if res == nil {
        return nil, nil
    }
    return res.(SearchGetResponseable), nil
}
// ToGetRequestInformation perform a comprehensive search across markets, events, and user profiles
// returns a *RequestInformation when successful
func (m *SearchRequestBuilder) ToGetRequestInformation(ctx context.Context, requestConfiguration *SearchRequestBuilderGetRequestConfiguration)(*i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.RequestInformation, error) {
    requestInfo := i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.NewRequestInformationWithMethodAndUrlTemplateAndPathParameters(i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.GET, m.BaseRequestBuilder.UrlTemplate, m.BaseRequestBuilder.PathParameters)
    if requestConfiguration != nil {
        if requestConfiguration.QueryParameters != nil {
            requestInfo.AddQueryParameters(*(requestConfiguration.QueryParameters))
        }
        requestInfo.Headers.AddAll(requestConfiguration.Headers)
        requestInfo.AddRequestOptions(requestConfiguration.Options)
    }
    requestInfo.Headers.TryAdd("Accept", "application/json")
    return requestInfo, nil
}
// WithUrl returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
// returns a *SearchRequestBuilder when successful
func (m *SearchRequestBuilder) WithUrl(rawUrl string)(*SearchRequestBuilder) {
    return NewSearchRequestBuilder(rawUrl, m.BaseRequestBuilder.RequestAdapter);
}
