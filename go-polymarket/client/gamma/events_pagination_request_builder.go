// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package gamma

import (
    "context"
    i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f "github.com/microsoft/kiota-abstractions-go"
)

// EventsPaginationRequestBuilder builds and executes requests for operations under \gamma\events\pagination
type EventsPaginationRequestBuilder struct {
    i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.BaseRequestBuilder
}
// EventsPaginationRequestBuilderGetQueryParameters retrieve events with pagination metadata
type EventsPaginationRequestBuilderGetQueryParameters struct {
    Ascending *bool `uriparametername:"ascending"`
    Include_chat *bool `uriparametername:"include_chat"`
    Include_template *bool `uriparametername:"include_template"`
    Limit *float64 `uriparametername:"limit"`
    Offset *float64 `uriparametername:"offset"`
    Order *string `uriparametername:"order"`
    Recurrence *string `uriparametername:"recurrence"`
}
// EventsPaginationRequestBuilderGetRequestConfiguration configuration for the request such as headers, query parameters, and middleware options.
type EventsPaginationRequestBuilderGetRequestConfiguration struct {
    // Request headers
    Headers *i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.RequestHeaders
    // Request options
    Options []i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.RequestOption
    // Request query parameters
    QueryParameters *EventsPaginationRequestBuilderGetQueryParameters
}
// NewEventsPaginationRequestBuilderInternal instantiates a new EventsPaginationRequestBuilder and sets the default values.
func NewEventsPaginationRequestBuilderInternal(pathParameters map[string]string, requestAdapter i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.RequestAdapter)(*EventsPaginationRequestBuilder) {
    m := &EventsPaginationRequestBuilder{
        BaseRequestBuilder: *i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.NewBaseRequestBuilder(requestAdapter, "{+baseurl}/gamma/events/pagination?limit={limit}&offset={offset}{&ascending*,include_chat*,include_template*,order*,recurrence*}", pathParameters),
    }
    return m
}
// NewEventsPaginationRequestBuilder instantiates a new EventsPaginationRequestBuilder and sets the default values.
func NewEventsPaginationRequestBuilder(rawUrl string, requestAdapter i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.RequestAdapter)(*EventsPaginationRequestBuilder) {
    urlParams := make(map[string]string)
    urlParams["request-raw-url"] = rawUrl
    return NewEventsPaginationRequestBuilderInternal(urlParams, requestAdapter)
}
// Get retrieve events with pagination metadata
// Deprecated: This method is obsolete. Use GetAsPaginationGetResponse instead.
// returns a EventsPaginationResponseable when successful
// returns a EventsPagination500Error error when the service returns a 500 status code
func (m *EventsPaginationRequestBuilder) Get(ctx context.Context, requestConfiguration *EventsPaginationRequestBuilderGetRequestConfiguration)(EventsPaginationResponseable, error) {
    requestInfo, err := m.ToGetRequestInformation(ctx, requestConfiguration);
    if err != nil {
        return nil, err
    }
    errorMapping := i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.ErrorMappings {
        "500": CreateEventsPagination500ErrorFromDiscriminatorValue,
    }
    res, err := m.BaseRequestBuilder.RequestAdapter.Send(ctx, requestInfo, CreateEventsPaginationResponseFromDiscriminatorValue, errorMapping)
    if err != nil {
        return nil, err
    }
    if res == nil {
        return nil, nil
    }
    return res.(EventsPaginationResponseable), nil
}
// GetAsPaginationGetResponse retrieve events with pagination metadata
// returns a EventsPaginationGetResponseable when successful
// returns a EventsPagination500Error error when the service returns a 500 status code
func (m *EventsPaginationRequestBuilder) GetAsPaginationGetResponse(ctx context.Context, requestConfiguration *EventsPaginationRequestBuilderGetRequestConfiguration)(EventsPaginationGetResponseable, error) {
    requestInfo, err := m.ToGetRequestInformation(ctx, requestConfiguration);
    if err != nil {
        return nil, err
    }
    errorMapping := i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.ErrorMappings {
        "500": CreateEventsPagination500ErrorFromDiscriminatorValue,
    }
    res, err := m.BaseRequestBuilder.RequestAdapter.Send(ctx, requestInfo, CreateEventsPaginationGetResponseFromDiscriminatorValue, errorMapping)
    if err != nil {
        return nil, err
    }
    if res == nil {
        return nil, nil
    }
    return res.(EventsPaginationGetResponseable), nil
}
// ToGetRequestInformation retrieve events with pagination metadata
// returns a *RequestInformation when successful
func (m *EventsPaginationRequestBuilder) ToGetRequestInformation(ctx context.Context, requestConfiguration *EventsPaginationRequestBuilderGetRequestConfiguration)(*i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.RequestInformation, error) {
    requestInfo := i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.NewRequestInformationWithMethodAndUrlTemplateAndPathParameters(i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.GET, m.BaseRequestBuilder.UrlTemplate, m.BaseRequestBuilder.PathParameters)
    if requestConfiguration != nil {
        if requestConfiguration.QueryParameters != nil {
            requestInfo.AddQueryParameters(*(requestConfiguration.QueryParameters))
        }
        requestInfo.Headers.AddAll(requestConfiguration.Headers)
        requestInfo.AddRequestOptions(requestConfiguration.Options)
    }
    requestInfo.Headers.TryAdd("Accept", "application/json")
    return requestInfo, nil
}
// WithUrl returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
// returns a *EventsPaginationRequestBuilder when successful
func (m *EventsPaginationRequestBuilder) WithUrl(rawUrl string)(*EventsPaginationRequestBuilder) {
    return NewEventsPaginationRequestBuilder(rawUrl, m.BaseRequestBuilder.RequestAdapter);
}
