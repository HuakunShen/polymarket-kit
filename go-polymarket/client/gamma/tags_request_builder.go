// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package gamma

import (
    "context"
    i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f "github.com/microsoft/kiota-abstractions-go"
)

// TagsRequestBuilder builds and executes requests for operations under \gamma\tags
type TagsRequestBuilder struct {
    i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.BaseRequestBuilder
}
// TagsRequestBuilderGetQueryParameters retrieve tags with pagination and filtering options
type TagsRequestBuilderGetQueryParameters struct {
    Ascending *bool `uriparametername:"ascending"`
    Include_template *bool `uriparametername:"include_template"`
    Is_carousel *bool `uriparametername:"is_carousel"`
    Limit *float64 `uriparametername:"limit"`
    Offset *float64 `uriparametername:"offset"`
    Order *string `uriparametername:"order"`
}
// TagsRequestBuilderGetRequestConfiguration configuration for the request such as headers, query parameters, and middleware options.
type TagsRequestBuilderGetRequestConfiguration struct {
    // Request headers
    Headers *i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.RequestHeaders
    // Request options
    Options []i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.RequestOption
    // Request query parameters
    QueryParameters *TagsRequestBuilderGetQueryParameters
}
// ById gets an item from the go-polymarket/client.gamma.tags.item collection
// returns a *TagsTagsItemRequestBuilder when successful
func (m *TagsRequestBuilder) ById(id string)(*TagsTagsItemRequestBuilder) {
    urlTplParams := make(map[string]string)
    for idx, item := range m.BaseRequestBuilder.PathParameters {
        urlTplParams[idx] = item
    }
    if id != "" {
        urlTplParams["id"] = id
    }
    return NewTagsTagsItemRequestBuilderInternal(urlTplParams, m.BaseRequestBuilder.RequestAdapter)
}
// NewTagsRequestBuilderInternal instantiates a new TagsRequestBuilder and sets the default values.
func NewTagsRequestBuilderInternal(pathParameters map[string]string, requestAdapter i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.RequestAdapter)(*TagsRequestBuilder) {
    m := &TagsRequestBuilder{
        BaseRequestBuilder: *i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.NewBaseRequestBuilder(requestAdapter, "{+baseurl}/gamma/tags{?ascending*,include_template*,is_carousel*,limit*,offset*,order*}", pathParameters),
    }
    return m
}
// NewTagsRequestBuilder instantiates a new TagsRequestBuilder and sets the default values.
func NewTagsRequestBuilder(rawUrl string, requestAdapter i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.RequestAdapter)(*TagsRequestBuilder) {
    urlParams := make(map[string]string)
    urlParams["request-raw-url"] = rawUrl
    return NewTagsRequestBuilderInternal(urlParams, requestAdapter)
}
// Get retrieve tags with pagination and filtering options
// returns a []Tagsable when successful
// returns a Tags500Error error when the service returns a 500 status code
func (m *TagsRequestBuilder) Get(ctx context.Context, requestConfiguration *TagsRequestBuilderGetRequestConfiguration)([]Tagsable, error) {
    requestInfo, err := m.ToGetRequestInformation(ctx, requestConfiguration);
    if err != nil {
        return nil, err
    }
    errorMapping := i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.ErrorMappings {
        "500": CreateTags500ErrorFromDiscriminatorValue,
    }
    res, err := m.BaseRequestBuilder.RequestAdapter.SendCollection(ctx, requestInfo, CreateTagsFromDiscriminatorValue, errorMapping)
    if err != nil {
        return nil, err
    }
    val := make([]Tagsable, len(res))
    for i, v := range res {
        if v != nil {
            val[i] = v.(Tagsable)
        }
    }
    return val, nil
}
// Slug the slug property
// returns a *TagsSlugRequestBuilder when successful
func (m *TagsRequestBuilder) Slug()(*TagsSlugRequestBuilder) {
    return NewTagsSlugRequestBuilderInternal(m.BaseRequestBuilder.PathParameters, m.BaseRequestBuilder.RequestAdapter)
}
// ToGetRequestInformation retrieve tags with pagination and filtering options
// returns a *RequestInformation when successful
func (m *TagsRequestBuilder) ToGetRequestInformation(ctx context.Context, requestConfiguration *TagsRequestBuilderGetRequestConfiguration)(*i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.RequestInformation, error) {
    requestInfo := i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.NewRequestInformationWithMethodAndUrlTemplateAndPathParameters(i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.GET, m.BaseRequestBuilder.UrlTemplate, m.BaseRequestBuilder.PathParameters)
    if requestConfiguration != nil {
        if requestConfiguration.QueryParameters != nil {
            requestInfo.AddQueryParameters(*(requestConfiguration.QueryParameters))
        }
        requestInfo.Headers.AddAll(requestConfiguration.Headers)
        requestInfo.AddRequestOptions(requestConfiguration.Options)
    }
    requestInfo.Headers.TryAdd("Accept", "application/json")
    return requestInfo, nil
}
// WithUrl returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
// returns a *TagsRequestBuilder when successful
func (m *TagsRequestBuilder) WithUrl(rawUrl string)(*TagsRequestBuilder) {
    return NewTagsRequestBuilder(rawUrl, m.BaseRequestBuilder.RequestAdapter);
}
