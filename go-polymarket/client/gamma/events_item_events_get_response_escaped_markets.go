// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package gamma

import (
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91 "github.com/microsoft/kiota-abstractions-go/serialization"
)

type EventsItemEventsGetResponse_markets struct {
    // The active property
    active *bool
    // Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
    additionalData map[string]any
    // The archived property
    archived *bool
    // The bestAsk property
    bestAsk *float64
    // The bestBid property
    bestBid *float64
    // The clobTokenIds property
    clobTokenIds []string
    // The closed property
    closed *bool
    // The competitive property
    competitive *float64
    // The conditionId property
    conditionId *string
    // The createdAt property
    createdAt *string
    // The description property
    description *string
    // The enableOrderBook property
    enableOrderBook *bool
    // The endDate property
    endDate *string
    // The endDateIso property
    endDateIso *string
    // The featured property
    featured *bool
    // The groupItemThreshold property
    groupItemThreshold *string
    // The groupItemTitle property
    groupItemTitle *string
    // The hasReviewedDates property
    hasReviewedDates *bool
    // The icon property
    icon *string
    // The id property
    id *string
    // The image property
    image *string
    // The lastTradePrice property
    lastTradePrice *float64
    // The liquidity property
    liquidity *string
    // The liquidityNum property
    liquidityNum *float64
    // The marketMakerAddress property
    marketMakerAddress *string
    // The new property
    new *bool
    // The oneDayPriceChange property
    oneDayPriceChange *float64
    // The oneHourPriceChange property
    oneHourPriceChange *float64
    // The orderMinSize property
    orderMinSize *float64
    // The orderPriceMinTickSize property
    orderPriceMinTickSize *float64
    // The outcomePrices property
    outcomePrices []string
    // The outcomes property
    outcomes []string
    // The question property
    question *string
    // The questionID property
    questionID *string
    // The resolutionSource property
    resolutionSource *string
    // The restricted property
    restricted *bool
    // The slug property
    slug *string
    // The spread property
    spread *float64
    // The startDate property
    startDate *string
    // The startDateIso property
    startDateIso *string
    // The updatedAt property
    updatedAt *string
    // The volume property
    volume *string
    // The volume1mo property
    volume1mo *float64
    // The volume1wk property
    volume1wk *float64
    // The volume1yr property
    volume1yr *float64
    // The volume24hr property
    volume24hr *float64
    // The volumeNum property
    volumeNum *float64
}
// NewEventsItemEventsGetResponse_markets instantiates a new EventsItemEventsGetResponse_markets and sets the default values.
func NewEventsItemEventsGetResponse_markets()(*EventsItemEventsGetResponse_markets) {
    m := &EventsItemEventsGetResponse_markets{
    }
    m.SetAdditionalData(make(map[string]any))
    return m
}
// CreateEventsItemEventsGetResponse_marketsFromDiscriminatorValue creates a new instance of the appropriate class based on discriminator value
// returns a Parsable when successful
func CreateEventsItemEventsGetResponse_marketsFromDiscriminatorValue(parseNode i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable, error) {
    return NewEventsItemEventsGetResponse_markets(), nil
}
// GetActive gets the active property value. The active property
// returns a *bool when successful
func (m *EventsItemEventsGetResponse_markets) GetActive()(*bool) {
    return m.active
}
// GetAdditionalData gets the AdditionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
// returns a map[string]any when successful
func (m *EventsItemEventsGetResponse_markets) GetAdditionalData()(map[string]any) {
    return m.additionalData
}
// GetArchived gets the archived property value. The archived property
// returns a *bool when successful
func (m *EventsItemEventsGetResponse_markets) GetArchived()(*bool) {
    return m.archived
}
// GetBestAsk gets the bestAsk property value. The bestAsk property
// returns a *float64 when successful
func (m *EventsItemEventsGetResponse_markets) GetBestAsk()(*float64) {
    return m.bestAsk
}
// GetBestBid gets the bestBid property value. The bestBid property
// returns a *float64 when successful
func (m *EventsItemEventsGetResponse_markets) GetBestBid()(*float64) {
    return m.bestBid
}
// GetClobTokenIds gets the clobTokenIds property value. The clobTokenIds property
// returns a []string when successful
func (m *EventsItemEventsGetResponse_markets) GetClobTokenIds()([]string) {
    return m.clobTokenIds
}
// GetClosed gets the closed property value. The closed property
// returns a *bool when successful
func (m *EventsItemEventsGetResponse_markets) GetClosed()(*bool) {
    return m.closed
}
// GetCompetitive gets the competitive property value. The competitive property
// returns a *float64 when successful
func (m *EventsItemEventsGetResponse_markets) GetCompetitive()(*float64) {
    return m.competitive
}
// GetConditionId gets the conditionId property value. The conditionId property
// returns a *string when successful
func (m *EventsItemEventsGetResponse_markets) GetConditionId()(*string) {
    return m.conditionId
}
// GetCreatedAt gets the createdAt property value. The createdAt property
// returns a *string when successful
func (m *EventsItemEventsGetResponse_markets) GetCreatedAt()(*string) {
    return m.createdAt
}
// GetDescription gets the description property value. The description property
// returns a *string when successful
func (m *EventsItemEventsGetResponse_markets) GetDescription()(*string) {
    return m.description
}
// GetEnableOrderBook gets the enableOrderBook property value. The enableOrderBook property
// returns a *bool when successful
func (m *EventsItemEventsGetResponse_markets) GetEnableOrderBook()(*bool) {
    return m.enableOrderBook
}
// GetEndDate gets the endDate property value. The endDate property
// returns a *string when successful
func (m *EventsItemEventsGetResponse_markets) GetEndDate()(*string) {
    return m.endDate
}
// GetEndDateIso gets the endDateIso property value. The endDateIso property
// returns a *string when successful
func (m *EventsItemEventsGetResponse_markets) GetEndDateIso()(*string) {
    return m.endDateIso
}
// GetFeatured gets the featured property value. The featured property
// returns a *bool when successful
func (m *EventsItemEventsGetResponse_markets) GetFeatured()(*bool) {
    return m.featured
}
// GetFieldDeserializers the deserialization information for the current model
// returns a map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error) when successful
func (m *EventsItemEventsGetResponse_markets) GetFieldDeserializers()(map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error)) {
    res := make(map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error))
    res["active"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetBoolValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetActive(val)
        }
        return nil
    }
    res["archived"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetBoolValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetArchived(val)
        }
        return nil
    }
    res["bestAsk"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetFloat64Value()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetBestAsk(val)
        }
        return nil
    }
    res["bestBid"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetFloat64Value()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetBestBid(val)
        }
        return nil
    }
    res["clobTokenIds"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetCollectionOfPrimitiveValues("string")
        if err != nil {
            return err
        }
        if val != nil {
            res := make([]string, len(val))
            for i, v := range val {
                if v != nil {
                    res[i] = *(v.(*string))
                }
            }
            m.SetClobTokenIds(res)
        }
        return nil
    }
    res["closed"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetBoolValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetClosed(val)
        }
        return nil
    }
    res["competitive"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetFloat64Value()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetCompetitive(val)
        }
        return nil
    }
    res["conditionId"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetConditionId(val)
        }
        return nil
    }
    res["createdAt"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetCreatedAt(val)
        }
        return nil
    }
    res["description"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetDescription(val)
        }
        return nil
    }
    res["enableOrderBook"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetBoolValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetEnableOrderBook(val)
        }
        return nil
    }
    res["endDate"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetEndDate(val)
        }
        return nil
    }
    res["endDateIso"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetEndDateIso(val)
        }
        return nil
    }
    res["featured"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetBoolValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetFeatured(val)
        }
        return nil
    }
    res["groupItemThreshold"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetGroupItemThreshold(val)
        }
        return nil
    }
    res["groupItemTitle"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetGroupItemTitle(val)
        }
        return nil
    }
    res["hasReviewedDates"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetBoolValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetHasReviewedDates(val)
        }
        return nil
    }
    res["icon"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetIcon(val)
        }
        return nil
    }
    res["id"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetId(val)
        }
        return nil
    }
    res["image"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetImage(val)
        }
        return nil
    }
    res["lastTradePrice"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetFloat64Value()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetLastTradePrice(val)
        }
        return nil
    }
    res["liquidity"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetLiquidity(val)
        }
        return nil
    }
    res["liquidityNum"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetFloat64Value()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetLiquidityNum(val)
        }
        return nil
    }
    res["marketMakerAddress"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetMarketMakerAddress(val)
        }
        return nil
    }
    res["new"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetBoolValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetNew(val)
        }
        return nil
    }
    res["oneDayPriceChange"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetFloat64Value()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetOneDayPriceChange(val)
        }
        return nil
    }
    res["oneHourPriceChange"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetFloat64Value()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetOneHourPriceChange(val)
        }
        return nil
    }
    res["orderMinSize"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetFloat64Value()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetOrderMinSize(val)
        }
        return nil
    }
    res["orderPriceMinTickSize"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetFloat64Value()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetOrderPriceMinTickSize(val)
        }
        return nil
    }
    res["outcomePrices"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetCollectionOfPrimitiveValues("string")
        if err != nil {
            return err
        }
        if val != nil {
            res := make([]string, len(val))
            for i, v := range val {
                if v != nil {
                    res[i] = *(v.(*string))
                }
            }
            m.SetOutcomePrices(res)
        }
        return nil
    }
    res["outcomes"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetCollectionOfPrimitiveValues("string")
        if err != nil {
            return err
        }
        if val != nil {
            res := make([]string, len(val))
            for i, v := range val {
                if v != nil {
                    res[i] = *(v.(*string))
                }
            }
            m.SetOutcomes(res)
        }
        return nil
    }
    res["question"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetQuestion(val)
        }
        return nil
    }
    res["questionID"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetQuestionID(val)
        }
        return nil
    }
    res["resolutionSource"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetResolutionSource(val)
        }
        return nil
    }
    res["restricted"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetBoolValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetRestricted(val)
        }
        return nil
    }
    res["slug"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetSlug(val)
        }
        return nil
    }
    res["spread"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetFloat64Value()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetSpread(val)
        }
        return nil
    }
    res["startDate"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetStartDate(val)
        }
        return nil
    }
    res["startDateIso"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetStartDateIso(val)
        }
        return nil
    }
    res["updatedAt"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetUpdatedAt(val)
        }
        return nil
    }
    res["volume"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetVolume(val)
        }
        return nil
    }
    res["volume1mo"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetFloat64Value()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetVolume1mo(val)
        }
        return nil
    }
    res["volume1wk"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetFloat64Value()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetVolume1wk(val)
        }
        return nil
    }
    res["volume1yr"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetFloat64Value()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetVolume1yr(val)
        }
        return nil
    }
    res["volume24hr"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetFloat64Value()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetVolume24hr(val)
        }
        return nil
    }
    res["volumeNum"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetFloat64Value()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetVolumeNum(val)
        }
        return nil
    }
    return res
}
// GetGroupItemThreshold gets the groupItemThreshold property value. The groupItemThreshold property
// returns a *string when successful
func (m *EventsItemEventsGetResponse_markets) GetGroupItemThreshold()(*string) {
    return m.groupItemThreshold
}
// GetGroupItemTitle gets the groupItemTitle property value. The groupItemTitle property
// returns a *string when successful
func (m *EventsItemEventsGetResponse_markets) GetGroupItemTitle()(*string) {
    return m.groupItemTitle
}
// GetHasReviewedDates gets the hasReviewedDates property value. The hasReviewedDates property
// returns a *bool when successful
func (m *EventsItemEventsGetResponse_markets) GetHasReviewedDates()(*bool) {
    return m.hasReviewedDates
}
// GetIcon gets the icon property value. The icon property
// returns a *string when successful
func (m *EventsItemEventsGetResponse_markets) GetIcon()(*string) {
    return m.icon
}
// GetId gets the id property value. The id property
// returns a *string when successful
func (m *EventsItemEventsGetResponse_markets) GetId()(*string) {
    return m.id
}
// GetImage gets the image property value. The image property
// returns a *string when successful
func (m *EventsItemEventsGetResponse_markets) GetImage()(*string) {
    return m.image
}
// GetLastTradePrice gets the lastTradePrice property value. The lastTradePrice property
// returns a *float64 when successful
func (m *EventsItemEventsGetResponse_markets) GetLastTradePrice()(*float64) {
    return m.lastTradePrice
}
// GetLiquidity gets the liquidity property value. The liquidity property
// returns a *string when successful
func (m *EventsItemEventsGetResponse_markets) GetLiquidity()(*string) {
    return m.liquidity
}
// GetLiquidityNum gets the liquidityNum property value. The liquidityNum property
// returns a *float64 when successful
func (m *EventsItemEventsGetResponse_markets) GetLiquidityNum()(*float64) {
    return m.liquidityNum
}
// GetMarketMakerAddress gets the marketMakerAddress property value. The marketMakerAddress property
// returns a *string when successful
func (m *EventsItemEventsGetResponse_markets) GetMarketMakerAddress()(*string) {
    return m.marketMakerAddress
}
// GetNew gets the new property value. The new property
// returns a *bool when successful
func (m *EventsItemEventsGetResponse_markets) GetNew()(*bool) {
    return m.new
}
// GetOneDayPriceChange gets the oneDayPriceChange property value. The oneDayPriceChange property
// returns a *float64 when successful
func (m *EventsItemEventsGetResponse_markets) GetOneDayPriceChange()(*float64) {
    return m.oneDayPriceChange
}
// GetOneHourPriceChange gets the oneHourPriceChange property value. The oneHourPriceChange property
// returns a *float64 when successful
func (m *EventsItemEventsGetResponse_markets) GetOneHourPriceChange()(*float64) {
    return m.oneHourPriceChange
}
// GetOrderMinSize gets the orderMinSize property value. The orderMinSize property
// returns a *float64 when successful
func (m *EventsItemEventsGetResponse_markets) GetOrderMinSize()(*float64) {
    return m.orderMinSize
}
// GetOrderPriceMinTickSize gets the orderPriceMinTickSize property value. The orderPriceMinTickSize property
// returns a *float64 when successful
func (m *EventsItemEventsGetResponse_markets) GetOrderPriceMinTickSize()(*float64) {
    return m.orderPriceMinTickSize
}
// GetOutcomePrices gets the outcomePrices property value. The outcomePrices property
// returns a []string when successful
func (m *EventsItemEventsGetResponse_markets) GetOutcomePrices()([]string) {
    return m.outcomePrices
}
// GetOutcomes gets the outcomes property value. The outcomes property
// returns a []string when successful
func (m *EventsItemEventsGetResponse_markets) GetOutcomes()([]string) {
    return m.outcomes
}
// GetQuestion gets the question property value. The question property
// returns a *string when successful
func (m *EventsItemEventsGetResponse_markets) GetQuestion()(*string) {
    return m.question
}
// GetQuestionID gets the questionID property value. The questionID property
// returns a *string when successful
func (m *EventsItemEventsGetResponse_markets) GetQuestionID()(*string) {
    return m.questionID
}
// GetResolutionSource gets the resolutionSource property value. The resolutionSource property
// returns a *string when successful
func (m *EventsItemEventsGetResponse_markets) GetResolutionSource()(*string) {
    return m.resolutionSource
}
// GetRestricted gets the restricted property value. The restricted property
// returns a *bool when successful
func (m *EventsItemEventsGetResponse_markets) GetRestricted()(*bool) {
    return m.restricted
}
// GetSlug gets the slug property value. The slug property
// returns a *string when successful
func (m *EventsItemEventsGetResponse_markets) GetSlug()(*string) {
    return m.slug
}
// GetSpread gets the spread property value. The spread property
// returns a *float64 when successful
func (m *EventsItemEventsGetResponse_markets) GetSpread()(*float64) {
    return m.spread
}
// GetStartDate gets the startDate property value. The startDate property
// returns a *string when successful
func (m *EventsItemEventsGetResponse_markets) GetStartDate()(*string) {
    return m.startDate
}
// GetStartDateIso gets the startDateIso property value. The startDateIso property
// returns a *string when successful
func (m *EventsItemEventsGetResponse_markets) GetStartDateIso()(*string) {
    return m.startDateIso
}
// GetUpdatedAt gets the updatedAt property value. The updatedAt property
// returns a *string when successful
func (m *EventsItemEventsGetResponse_markets) GetUpdatedAt()(*string) {
    return m.updatedAt
}
// GetVolume gets the volume property value. The volume property
// returns a *string when successful
func (m *EventsItemEventsGetResponse_markets) GetVolume()(*string) {
    return m.volume
}
// GetVolume1mo gets the volume1mo property value. The volume1mo property
// returns a *float64 when successful
func (m *EventsItemEventsGetResponse_markets) GetVolume1mo()(*float64) {
    return m.volume1mo
}
// GetVolume1wk gets the volume1wk property value. The volume1wk property
// returns a *float64 when successful
func (m *EventsItemEventsGetResponse_markets) GetVolume1wk()(*float64) {
    return m.volume1wk
}
// GetVolume1yr gets the volume1yr property value. The volume1yr property
// returns a *float64 when successful
func (m *EventsItemEventsGetResponse_markets) GetVolume1yr()(*float64) {
    return m.volume1yr
}
// GetVolume24hr gets the volume24hr property value. The volume24hr property
// returns a *float64 when successful
func (m *EventsItemEventsGetResponse_markets) GetVolume24hr()(*float64) {
    return m.volume24hr
}
// GetVolumeNum gets the volumeNum property value. The volumeNum property
// returns a *float64 when successful
func (m *EventsItemEventsGetResponse_markets) GetVolumeNum()(*float64) {
    return m.volumeNum
}
// Serialize serializes information the current object
func (m *EventsItemEventsGetResponse_markets) Serialize(writer i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.SerializationWriter)(error) {
    {
        err := writer.WriteBoolValue("active", m.GetActive())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteBoolValue("archived", m.GetArchived())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteFloat64Value("bestAsk", m.GetBestAsk())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteFloat64Value("bestBid", m.GetBestBid())
        if err != nil {
            return err
        }
    }
    if m.GetClobTokenIds() != nil {
        err := writer.WriteCollectionOfStringValues("clobTokenIds", m.GetClobTokenIds())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteBoolValue("closed", m.GetClosed())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteFloat64Value("competitive", m.GetCompetitive())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteStringValue("conditionId", m.GetConditionId())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteStringValue("createdAt", m.GetCreatedAt())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteStringValue("description", m.GetDescription())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteBoolValue("enableOrderBook", m.GetEnableOrderBook())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteStringValue("endDate", m.GetEndDate())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteStringValue("endDateIso", m.GetEndDateIso())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteBoolValue("featured", m.GetFeatured())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteStringValue("groupItemThreshold", m.GetGroupItemThreshold())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteStringValue("groupItemTitle", m.GetGroupItemTitle())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteBoolValue("hasReviewedDates", m.GetHasReviewedDates())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteStringValue("icon", m.GetIcon())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteStringValue("id", m.GetId())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteStringValue("image", m.GetImage())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteFloat64Value("lastTradePrice", m.GetLastTradePrice())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteStringValue("liquidity", m.GetLiquidity())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteFloat64Value("liquidityNum", m.GetLiquidityNum())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteStringValue("marketMakerAddress", m.GetMarketMakerAddress())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteBoolValue("new", m.GetNew())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteFloat64Value("oneDayPriceChange", m.GetOneDayPriceChange())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteFloat64Value("oneHourPriceChange", m.GetOneHourPriceChange())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteFloat64Value("orderMinSize", m.GetOrderMinSize())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteFloat64Value("orderPriceMinTickSize", m.GetOrderPriceMinTickSize())
        if err != nil {
            return err
        }
    }
    if m.GetOutcomePrices() != nil {
        err := writer.WriteCollectionOfStringValues("outcomePrices", m.GetOutcomePrices())
        if err != nil {
            return err
        }
    }
    if m.GetOutcomes() != nil {
        err := writer.WriteCollectionOfStringValues("outcomes", m.GetOutcomes())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteStringValue("question", m.GetQuestion())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteStringValue("questionID", m.GetQuestionID())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteStringValue("resolutionSource", m.GetResolutionSource())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteBoolValue("restricted", m.GetRestricted())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteStringValue("slug", m.GetSlug())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteFloat64Value("spread", m.GetSpread())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteStringValue("startDate", m.GetStartDate())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteStringValue("startDateIso", m.GetStartDateIso())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteStringValue("updatedAt", m.GetUpdatedAt())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteStringValue("volume", m.GetVolume())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteFloat64Value("volume1mo", m.GetVolume1mo())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteFloat64Value("volume1wk", m.GetVolume1wk())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteFloat64Value("volume1yr", m.GetVolume1yr())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteFloat64Value("volume24hr", m.GetVolume24hr())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteFloat64Value("volumeNum", m.GetVolumeNum())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteAdditionalData(m.GetAdditionalData())
        if err != nil {
            return err
        }
    }
    return nil
}
// SetActive sets the active property value. The active property
func (m *EventsItemEventsGetResponse_markets) SetActive(value *bool)() {
    m.active = value
}
// SetAdditionalData sets the AdditionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
func (m *EventsItemEventsGetResponse_markets) SetAdditionalData(value map[string]any)() {
    m.additionalData = value
}
// SetArchived sets the archived property value. The archived property
func (m *EventsItemEventsGetResponse_markets) SetArchived(value *bool)() {
    m.archived = value
}
// SetBestAsk sets the bestAsk property value. The bestAsk property
func (m *EventsItemEventsGetResponse_markets) SetBestAsk(value *float64)() {
    m.bestAsk = value
}
// SetBestBid sets the bestBid property value. The bestBid property
func (m *EventsItemEventsGetResponse_markets) SetBestBid(value *float64)() {
    m.bestBid = value
}
// SetClobTokenIds sets the clobTokenIds property value. The clobTokenIds property
func (m *EventsItemEventsGetResponse_markets) SetClobTokenIds(value []string)() {
    m.clobTokenIds = value
}
// SetClosed sets the closed property value. The closed property
func (m *EventsItemEventsGetResponse_markets) SetClosed(value *bool)() {
    m.closed = value
}
// SetCompetitive sets the competitive property value. The competitive property
func (m *EventsItemEventsGetResponse_markets) SetCompetitive(value *float64)() {
    m.competitive = value
}
// SetConditionId sets the conditionId property value. The conditionId property
func (m *EventsItemEventsGetResponse_markets) SetConditionId(value *string)() {
    m.conditionId = value
}
// SetCreatedAt sets the createdAt property value. The createdAt property
func (m *EventsItemEventsGetResponse_markets) SetCreatedAt(value *string)() {
    m.createdAt = value
}
// SetDescription sets the description property value. The description property
func (m *EventsItemEventsGetResponse_markets) SetDescription(value *string)() {
    m.description = value
}
// SetEnableOrderBook sets the enableOrderBook property value. The enableOrderBook property
func (m *EventsItemEventsGetResponse_markets) SetEnableOrderBook(value *bool)() {
    m.enableOrderBook = value
}
// SetEndDate sets the endDate property value. The endDate property
func (m *EventsItemEventsGetResponse_markets) SetEndDate(value *string)() {
    m.endDate = value
}
// SetEndDateIso sets the endDateIso property value. The endDateIso property
func (m *EventsItemEventsGetResponse_markets) SetEndDateIso(value *string)() {
    m.endDateIso = value
}
// SetFeatured sets the featured property value. The featured property
func (m *EventsItemEventsGetResponse_markets) SetFeatured(value *bool)() {
    m.featured = value
}
// SetGroupItemThreshold sets the groupItemThreshold property value. The groupItemThreshold property
func (m *EventsItemEventsGetResponse_markets) SetGroupItemThreshold(value *string)() {
    m.groupItemThreshold = value
}
// SetGroupItemTitle sets the groupItemTitle property value. The groupItemTitle property
func (m *EventsItemEventsGetResponse_markets) SetGroupItemTitle(value *string)() {
    m.groupItemTitle = value
}
// SetHasReviewedDates sets the hasReviewedDates property value. The hasReviewedDates property
func (m *EventsItemEventsGetResponse_markets) SetHasReviewedDates(value *bool)() {
    m.hasReviewedDates = value
}
// SetIcon sets the icon property value. The icon property
func (m *EventsItemEventsGetResponse_markets) SetIcon(value *string)() {
    m.icon = value
}
// SetId sets the id property value. The id property
func (m *EventsItemEventsGetResponse_markets) SetId(value *string)() {
    m.id = value
}
// SetImage sets the image property value. The image property
func (m *EventsItemEventsGetResponse_markets) SetImage(value *string)() {
    m.image = value
}
// SetLastTradePrice sets the lastTradePrice property value. The lastTradePrice property
func (m *EventsItemEventsGetResponse_markets) SetLastTradePrice(value *float64)() {
    m.lastTradePrice = value
}
// SetLiquidity sets the liquidity property value. The liquidity property
func (m *EventsItemEventsGetResponse_markets) SetLiquidity(value *string)() {
    m.liquidity = value
}
// SetLiquidityNum sets the liquidityNum property value. The liquidityNum property
func (m *EventsItemEventsGetResponse_markets) SetLiquidityNum(value *float64)() {
    m.liquidityNum = value
}
// SetMarketMakerAddress sets the marketMakerAddress property value. The marketMakerAddress property
func (m *EventsItemEventsGetResponse_markets) SetMarketMakerAddress(value *string)() {
    m.marketMakerAddress = value
}
// SetNew sets the new property value. The new property
func (m *EventsItemEventsGetResponse_markets) SetNew(value *bool)() {
    m.new = value
}
// SetOneDayPriceChange sets the oneDayPriceChange property value. The oneDayPriceChange property
func (m *EventsItemEventsGetResponse_markets) SetOneDayPriceChange(value *float64)() {
    m.oneDayPriceChange = value
}
// SetOneHourPriceChange sets the oneHourPriceChange property value. The oneHourPriceChange property
func (m *EventsItemEventsGetResponse_markets) SetOneHourPriceChange(value *float64)() {
    m.oneHourPriceChange = value
}
// SetOrderMinSize sets the orderMinSize property value. The orderMinSize property
func (m *EventsItemEventsGetResponse_markets) SetOrderMinSize(value *float64)() {
    m.orderMinSize = value
}
// SetOrderPriceMinTickSize sets the orderPriceMinTickSize property value. The orderPriceMinTickSize property
func (m *EventsItemEventsGetResponse_markets) SetOrderPriceMinTickSize(value *float64)() {
    m.orderPriceMinTickSize = value
}
// SetOutcomePrices sets the outcomePrices property value. The outcomePrices property
func (m *EventsItemEventsGetResponse_markets) SetOutcomePrices(value []string)() {
    m.outcomePrices = value
}
// SetOutcomes sets the outcomes property value. The outcomes property
func (m *EventsItemEventsGetResponse_markets) SetOutcomes(value []string)() {
    m.outcomes = value
}
// SetQuestion sets the question property value. The question property
func (m *EventsItemEventsGetResponse_markets) SetQuestion(value *string)() {
    m.question = value
}
// SetQuestionID sets the questionID property value. The questionID property
func (m *EventsItemEventsGetResponse_markets) SetQuestionID(value *string)() {
    m.questionID = value
}
// SetResolutionSource sets the resolutionSource property value. The resolutionSource property
func (m *EventsItemEventsGetResponse_markets) SetResolutionSource(value *string)() {
    m.resolutionSource = value
}
// SetRestricted sets the restricted property value. The restricted property
func (m *EventsItemEventsGetResponse_markets) SetRestricted(value *bool)() {
    m.restricted = value
}
// SetSlug sets the slug property value. The slug property
func (m *EventsItemEventsGetResponse_markets) SetSlug(value *string)() {
    m.slug = value
}
// SetSpread sets the spread property value. The spread property
func (m *EventsItemEventsGetResponse_markets) SetSpread(value *float64)() {
    m.spread = value
}
// SetStartDate sets the startDate property value. The startDate property
func (m *EventsItemEventsGetResponse_markets) SetStartDate(value *string)() {
    m.startDate = value
}
// SetStartDateIso sets the startDateIso property value. The startDateIso property
func (m *EventsItemEventsGetResponse_markets) SetStartDateIso(value *string)() {
    m.startDateIso = value
}
// SetUpdatedAt sets the updatedAt property value. The updatedAt property
func (m *EventsItemEventsGetResponse_markets) SetUpdatedAt(value *string)() {
    m.updatedAt = value
}
// SetVolume sets the volume property value. The volume property
func (m *EventsItemEventsGetResponse_markets) SetVolume(value *string)() {
    m.volume = value
}
// SetVolume1mo sets the volume1mo property value. The volume1mo property
func (m *EventsItemEventsGetResponse_markets) SetVolume1mo(value *float64)() {
    m.volume1mo = value
}
// SetVolume1wk sets the volume1wk property value. The volume1wk property
func (m *EventsItemEventsGetResponse_markets) SetVolume1wk(value *float64)() {
    m.volume1wk = value
}
// SetVolume1yr sets the volume1yr property value. The volume1yr property
func (m *EventsItemEventsGetResponse_markets) SetVolume1yr(value *float64)() {
    m.volume1yr = value
}
// SetVolume24hr sets the volume24hr property value. The volume24hr property
func (m *EventsItemEventsGetResponse_markets) SetVolume24hr(value *float64)() {
    m.volume24hr = value
}
// SetVolumeNum sets the volumeNum property value. The volumeNum property
func (m *EventsItemEventsGetResponse_markets) SetVolumeNum(value *float64)() {
    m.volumeNum = value
}
type EventsItemEventsGetResponse_marketsable interface {
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.AdditionalDataHolder
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable
    GetActive()(*bool)
    GetArchived()(*bool)
    GetBestAsk()(*float64)
    GetBestBid()(*float64)
    GetClobTokenIds()([]string)
    GetClosed()(*bool)
    GetCompetitive()(*float64)
    GetConditionId()(*string)
    GetCreatedAt()(*string)
    GetDescription()(*string)
    GetEnableOrderBook()(*bool)
    GetEndDate()(*string)
    GetEndDateIso()(*string)
    GetFeatured()(*bool)
    GetGroupItemThreshold()(*string)
    GetGroupItemTitle()(*string)
    GetHasReviewedDates()(*bool)
    GetIcon()(*string)
    GetId()(*string)
    GetImage()(*string)
    GetLastTradePrice()(*float64)
    GetLiquidity()(*string)
    GetLiquidityNum()(*float64)
    GetMarketMakerAddress()(*string)
    GetNew()(*bool)
    GetOneDayPriceChange()(*float64)
    GetOneHourPriceChange()(*float64)
    GetOrderMinSize()(*float64)
    GetOrderPriceMinTickSize()(*float64)
    GetOutcomePrices()([]string)
    GetOutcomes()([]string)
    GetQuestion()(*string)
    GetQuestionID()(*string)
    GetResolutionSource()(*string)
    GetRestricted()(*bool)
    GetSlug()(*string)
    GetSpread()(*float64)
    GetStartDate()(*string)
    GetStartDateIso()(*string)
    GetUpdatedAt()(*string)
    GetVolume()(*string)
    GetVolume1mo()(*float64)
    GetVolume1wk()(*float64)
    GetVolume1yr()(*float64)
    GetVolume24hr()(*float64)
    GetVolumeNum()(*float64)
    SetActive(value *bool)()
    SetArchived(value *bool)()
    SetBestAsk(value *float64)()
    SetBestBid(value *float64)()
    SetClobTokenIds(value []string)()
    SetClosed(value *bool)()
    SetCompetitive(value *float64)()
    SetConditionId(value *string)()
    SetCreatedAt(value *string)()
    SetDescription(value *string)()
    SetEnableOrderBook(value *bool)()
    SetEndDate(value *string)()
    SetEndDateIso(value *string)()
    SetFeatured(value *bool)()
    SetGroupItemThreshold(value *string)()
    SetGroupItemTitle(value *string)()
    SetHasReviewedDates(value *bool)()
    SetIcon(value *string)()
    SetId(value *string)()
    SetImage(value *string)()
    SetLastTradePrice(value *float64)()
    SetLiquidity(value *string)()
    SetLiquidityNum(value *float64)()
    SetMarketMakerAddress(value *string)()
    SetNew(value *bool)()
    SetOneDayPriceChange(value *float64)()
    SetOneHourPriceChange(value *float64)()
    SetOrderMinSize(value *float64)()
    SetOrderPriceMinTickSize(value *float64)()
    SetOutcomePrices(value []string)()
    SetOutcomes(value []string)()
    SetQuestion(value *string)()
    SetQuestionID(value *string)()
    SetResolutionSource(value *string)()
    SetRestricted(value *bool)()
    SetSlug(value *string)()
    SetSpread(value *float64)()
    SetStartDate(value *string)()
    SetStartDateIso(value *string)()
    SetUpdatedAt(value *string)()
    SetVolume(value *string)()
    SetVolume1mo(value *float64)()
    SetVolume1wk(value *float64)()
    SetVolume1yr(value *float64)()
    SetVolume24hr(value *float64)()
    SetVolumeNum(value *float64)()
}
