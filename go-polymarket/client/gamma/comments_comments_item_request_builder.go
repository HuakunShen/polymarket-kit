// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package gamma

import (
    "context"
    i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f "github.com/microsoft/kiota-abstractions-go"
)

// CommentsCommentsItemRequestBuilder builds and executes requests for operations under \gamma\comments\{id}
type CommentsCommentsItemRequestBuilder struct {
    i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.BaseRequestBuilder
}
// CommentsCommentsItemRequestBuilderGetQueryParameters retrieve comments related to a specific comment ID
type CommentsCommentsItemRequestBuilderGetQueryParameters struct {
    Get_positions *bool `uriparametername:"get_positions"`
}
// CommentsCommentsItemRequestBuilderGetRequestConfiguration configuration for the request such as headers, query parameters, and middleware options.
type CommentsCommentsItemRequestBuilderGetRequestConfiguration struct {
    // Request headers
    Headers *i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.RequestHeaders
    // Request options
    Options []i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.RequestOption
    // Request query parameters
    QueryParameters *CommentsCommentsItemRequestBuilderGetQueryParameters
}
// NewCommentsCommentsItemRequestBuilderInternal instantiates a new CommentsCommentsItemRequestBuilder and sets the default values.
func NewCommentsCommentsItemRequestBuilderInternal(pathParameters map[string]string, requestAdapter i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.RequestAdapter)(*CommentsCommentsItemRequestBuilder) {
    m := &CommentsCommentsItemRequestBuilder{
        BaseRequestBuilder: *i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.NewBaseRequestBuilder(requestAdapter, "{+baseurl}/gamma/comments/{id}{?get_positions*}", pathParameters),
    }
    return m
}
// NewCommentsCommentsItemRequestBuilder instantiates a new CommentsCommentsItemRequestBuilder and sets the default values.
func NewCommentsCommentsItemRequestBuilder(rawUrl string, requestAdapter i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.RequestAdapter)(*CommentsCommentsItemRequestBuilder) {
    urlParams := make(map[string]string)
    urlParams["request-raw-url"] = rawUrl
    return NewCommentsCommentsItemRequestBuilderInternal(urlParams, requestAdapter)
}
// Get retrieve comments related to a specific comment ID
// returns a []CommentsItemCommentsable when successful
// returns a CommentsItemComments500Error error when the service returns a 500 status code
func (m *CommentsCommentsItemRequestBuilder) Get(ctx context.Context, requestConfiguration *CommentsCommentsItemRequestBuilderGetRequestConfiguration)([]CommentsItemCommentsable, error) {
    requestInfo, err := m.ToGetRequestInformation(ctx, requestConfiguration);
    if err != nil {
        return nil, err
    }
    errorMapping := i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.ErrorMappings {
        "500": CreateCommentsItemComments500ErrorFromDiscriminatorValue,
    }
    res, err := m.BaseRequestBuilder.RequestAdapter.SendCollection(ctx, requestInfo, CreateCommentsItemCommentsFromDiscriminatorValue, errorMapping)
    if err != nil {
        return nil, err
    }
    val := make([]CommentsItemCommentsable, len(res))
    for i, v := range res {
        if v != nil {
            val[i] = v.(CommentsItemCommentsable)
        }
    }
    return val, nil
}
// ToGetRequestInformation retrieve comments related to a specific comment ID
// returns a *RequestInformation when successful
func (m *CommentsCommentsItemRequestBuilder) ToGetRequestInformation(ctx context.Context, requestConfiguration *CommentsCommentsItemRequestBuilderGetRequestConfiguration)(*i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.RequestInformation, error) {
    requestInfo := i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.NewRequestInformationWithMethodAndUrlTemplateAndPathParameters(i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.GET, m.BaseRequestBuilder.UrlTemplate, m.BaseRequestBuilder.PathParameters)
    if requestConfiguration != nil {
        if requestConfiguration.QueryParameters != nil {
            requestInfo.AddQueryParameters(*(requestConfiguration.QueryParameters))
        }
        requestInfo.Headers.AddAll(requestConfiguration.Headers)
        requestInfo.AddRequestOptions(requestConfiguration.Options)
    }
    requestInfo.Headers.TryAdd("Accept", "application/json")
    return requestInfo, nil
}
// WithUrl returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
// returns a *CommentsCommentsItemRequestBuilder when successful
func (m *CommentsCommentsItemRequestBuilder) WithUrl(rawUrl string)(*CommentsCommentsItemRequestBuilder) {
    return NewCommentsCommentsItemRequestBuilder(rawUrl, m.BaseRequestBuilder.RequestAdapter);
}
