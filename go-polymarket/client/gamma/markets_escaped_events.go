// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package gamma

import (
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91 "github.com/microsoft/kiota-abstractions-go/serialization"
)

type Markets_events struct {
    // The active property
    active *bool
    // Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
    additionalData map[string]any
    // The archived property
    archived *bool
    // The closed property
    closed *bool
    // The description property
    description *string
    // The id property
    id *string
    // The slug property
    slug *string
    // The ticker property
    ticker *string
    // The title property
    title *string
}
// NewMarkets_events instantiates a new Markets_events and sets the default values.
func NewMarkets_events()(*Markets_events) {
    m := &Markets_events{
    }
    m.SetAdditionalData(make(map[string]any))
    return m
}
// CreateMarkets_eventsFromDiscriminatorValue creates a new instance of the appropriate class based on discriminator value
// returns a Parsable when successful
func CreateMarkets_eventsFromDiscriminatorValue(parseNode i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable, error) {
    return NewMarkets_events(), nil
}
// GetActive gets the active property value. The active property
// returns a *bool when successful
func (m *Markets_events) GetActive()(*bool) {
    return m.active
}
// GetAdditionalData gets the AdditionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
// returns a map[string]any when successful
func (m *Markets_events) GetAdditionalData()(map[string]any) {
    return m.additionalData
}
// GetArchived gets the archived property value. The archived property
// returns a *bool when successful
func (m *Markets_events) GetArchived()(*bool) {
    return m.archived
}
// GetClosed gets the closed property value. The closed property
// returns a *bool when successful
func (m *Markets_events) GetClosed()(*bool) {
    return m.closed
}
// GetDescription gets the description property value. The description property
// returns a *string when successful
func (m *Markets_events) GetDescription()(*string) {
    return m.description
}
// GetFieldDeserializers the deserialization information for the current model
// returns a map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error) when successful
func (m *Markets_events) GetFieldDeserializers()(map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error)) {
    res := make(map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error))
    res["active"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetBoolValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetActive(val)
        }
        return nil
    }
    res["archived"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetBoolValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetArchived(val)
        }
        return nil
    }
    res["closed"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetBoolValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetClosed(val)
        }
        return nil
    }
    res["description"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetDescription(val)
        }
        return nil
    }
    res["id"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetId(val)
        }
        return nil
    }
    res["slug"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetSlug(val)
        }
        return nil
    }
    res["ticker"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetTicker(val)
        }
        return nil
    }
    res["title"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetTitle(val)
        }
        return nil
    }
    return res
}
// GetId gets the id property value. The id property
// returns a *string when successful
func (m *Markets_events) GetId()(*string) {
    return m.id
}
// GetSlug gets the slug property value. The slug property
// returns a *string when successful
func (m *Markets_events) GetSlug()(*string) {
    return m.slug
}
// GetTicker gets the ticker property value. The ticker property
// returns a *string when successful
func (m *Markets_events) GetTicker()(*string) {
    return m.ticker
}
// GetTitle gets the title property value. The title property
// returns a *string when successful
func (m *Markets_events) GetTitle()(*string) {
    return m.title
}
// Serialize serializes information the current object
func (m *Markets_events) Serialize(writer i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.SerializationWriter)(error) {
    {
        err := writer.WriteBoolValue("active", m.GetActive())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteBoolValue("archived", m.GetArchived())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteBoolValue("closed", m.GetClosed())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteStringValue("description", m.GetDescription())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteStringValue("id", m.GetId())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteStringValue("slug", m.GetSlug())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteStringValue("ticker", m.GetTicker())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteStringValue("title", m.GetTitle())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteAdditionalData(m.GetAdditionalData())
        if err != nil {
            return err
        }
    }
    return nil
}
// SetActive sets the active property value. The active property
func (m *Markets_events) SetActive(value *bool)() {
    m.active = value
}
// SetAdditionalData sets the AdditionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
func (m *Markets_events) SetAdditionalData(value map[string]any)() {
    m.additionalData = value
}
// SetArchived sets the archived property value. The archived property
func (m *Markets_events) SetArchived(value *bool)() {
    m.archived = value
}
// SetClosed sets the closed property value. The closed property
func (m *Markets_events) SetClosed(value *bool)() {
    m.closed = value
}
// SetDescription sets the description property value. The description property
func (m *Markets_events) SetDescription(value *string)() {
    m.description = value
}
// SetId sets the id property value. The id property
func (m *Markets_events) SetId(value *string)() {
    m.id = value
}
// SetSlug sets the slug property value. The slug property
func (m *Markets_events) SetSlug(value *string)() {
    m.slug = value
}
// SetTicker sets the ticker property value. The ticker property
func (m *Markets_events) SetTicker(value *string)() {
    m.ticker = value
}
// SetTitle sets the title property value. The title property
func (m *Markets_events) SetTitle(value *string)() {
    m.title = value
}
type Markets_eventsable interface {
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.AdditionalDataHolder
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable
    GetActive()(*bool)
    GetArchived()(*bool)
    GetClosed()(*bool)
    GetDescription()(*string)
    GetId()(*string)
    GetSlug()(*string)
    GetTicker()(*string)
    GetTitle()(*string)
    SetActive(value *bool)()
    SetArchived(value *bool)()
    SetClosed(value *bool)()
    SetDescription(value *string)()
    SetId(value *string)()
    SetSlug(value *string)()
    SetTicker(value *string)()
    SetTitle(value *string)()
}
