// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package gamma

import (
    "context"
    i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f "github.com/microsoft/kiota-abstractions-go"
)

// MarketsMarketsItemRequestBuilder builds and executes requests for operations under \gamma\markets\{id}
type MarketsMarketsItemRequestBuilder struct {
    i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.BaseRequestBuilder
}
// MarketsMarketsItemRequestBuilderGetQueryParameters retrieve a specific market by its ID
type MarketsMarketsItemRequestBuilderGetQueryParameters struct {
    Include_tag *bool `uriparametername:"include_tag"`
}
// MarketsMarketsItemRequestBuilderGetRequestConfiguration configuration for the request such as headers, query parameters, and middleware options.
type MarketsMarketsItemRequestBuilderGetRequestConfiguration struct {
    // Request headers
    Headers *i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.RequestHeaders
    // Request options
    Options []i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.RequestOption
    // Request query parameters
    QueryParameters *MarketsMarketsItemRequestBuilderGetQueryParameters
}
// NewMarketsMarketsItemRequestBuilderInternal instantiates a new MarketsMarketsItemRequestBuilder and sets the default values.
func NewMarketsMarketsItemRequestBuilderInternal(pathParameters map[string]string, requestAdapter i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.RequestAdapter)(*MarketsMarketsItemRequestBuilder) {
    m := &MarketsMarketsItemRequestBuilder{
        BaseRequestBuilder: *i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.NewBaseRequestBuilder(requestAdapter, "{+baseurl}/gamma/markets/{id}{?include_tag*}", pathParameters),
    }
    return m
}
// NewMarketsMarketsItemRequestBuilder instantiates a new MarketsMarketsItemRequestBuilder and sets the default values.
func NewMarketsMarketsItemRequestBuilder(rawUrl string, requestAdapter i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.RequestAdapter)(*MarketsMarketsItemRequestBuilder) {
    urlParams := make(map[string]string)
    urlParams["request-raw-url"] = rawUrl
    return NewMarketsMarketsItemRequestBuilderInternal(urlParams, requestAdapter)
}
// Get retrieve a specific market by its ID
// Deprecated: This method is obsolete. Use GetAsMarketsGetResponse instead.
// returns a MarketsItemMarketsResponseable when successful
// returns a MarketsItemMarkets404Error error when the service returns a 404 status code
// returns a MarketsItemMarkets500Error error when the service returns a 500 status code
func (m *MarketsMarketsItemRequestBuilder) Get(ctx context.Context, requestConfiguration *MarketsMarketsItemRequestBuilderGetRequestConfiguration)(MarketsItemMarketsResponseable, error) {
    requestInfo, err := m.ToGetRequestInformation(ctx, requestConfiguration);
    if err != nil {
        return nil, err
    }
    errorMapping := i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.ErrorMappings {
        "404": CreateMarketsItemMarkets404ErrorFromDiscriminatorValue,
        "500": CreateMarketsItemMarkets500ErrorFromDiscriminatorValue,
    }
    res, err := m.BaseRequestBuilder.RequestAdapter.Send(ctx, requestInfo, CreateMarketsItemMarketsResponseFromDiscriminatorValue, errorMapping)
    if err != nil {
        return nil, err
    }
    if res == nil {
        return nil, nil
    }
    return res.(MarketsItemMarketsResponseable), nil
}
// GetAsMarketsGetResponse retrieve a specific market by its ID
// returns a MarketsItemMarketsGetResponseable when successful
// returns a MarketsItemMarkets404Error error when the service returns a 404 status code
// returns a MarketsItemMarkets500Error error when the service returns a 500 status code
func (m *MarketsMarketsItemRequestBuilder) GetAsMarketsGetResponse(ctx context.Context, requestConfiguration *MarketsMarketsItemRequestBuilderGetRequestConfiguration)(MarketsItemMarketsGetResponseable, error) {
    requestInfo, err := m.ToGetRequestInformation(ctx, requestConfiguration);
    if err != nil {
        return nil, err
    }
    errorMapping := i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.ErrorMappings {
        "404": CreateMarketsItemMarkets404ErrorFromDiscriminatorValue,
        "500": CreateMarketsItemMarkets500ErrorFromDiscriminatorValue,
    }
    res, err := m.BaseRequestBuilder.RequestAdapter.Send(ctx, requestInfo, CreateMarketsItemMarketsGetResponseFromDiscriminatorValue, errorMapping)
    if err != nil {
        return nil, err
    }
    if res == nil {
        return nil, nil
    }
    return res.(MarketsItemMarketsGetResponseable), nil
}
// Tags the tags property
// returns a *MarketsItemTagsRequestBuilder when successful
func (m *MarketsMarketsItemRequestBuilder) Tags()(*MarketsItemTagsRequestBuilder) {
    return NewMarketsItemTagsRequestBuilderInternal(m.BaseRequestBuilder.PathParameters, m.BaseRequestBuilder.RequestAdapter)
}
// ToGetRequestInformation retrieve a specific market by its ID
// returns a *RequestInformation when successful
func (m *MarketsMarketsItemRequestBuilder) ToGetRequestInformation(ctx context.Context, requestConfiguration *MarketsMarketsItemRequestBuilderGetRequestConfiguration)(*i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.RequestInformation, error) {
    requestInfo := i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.NewRequestInformationWithMethodAndUrlTemplateAndPathParameters(i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.GET, m.BaseRequestBuilder.UrlTemplate, m.BaseRequestBuilder.PathParameters)
    if requestConfiguration != nil {
        if requestConfiguration.QueryParameters != nil {
            requestInfo.AddQueryParameters(*(requestConfiguration.QueryParameters))
        }
        requestInfo.Headers.AddAll(requestConfiguration.Headers)
        requestInfo.AddRequestOptions(requestConfiguration.Options)
    }
    requestInfo.Headers.TryAdd("Accept", "application/json")
    return requestInfo, nil
}
// WithUrl returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
// returns a *MarketsMarketsItemRequestBuilder when successful
func (m *MarketsMarketsItemRequestBuilder) WithUrl(rawUrl string)(*MarketsMarketsItemRequestBuilder) {
    return NewMarketsMarketsItemRequestBuilder(rawUrl, m.BaseRequestBuilder.RequestAdapter);
}
