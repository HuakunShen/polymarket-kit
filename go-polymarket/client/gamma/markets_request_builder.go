// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package gamma

import (
    "context"
    i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f "github.com/microsoft/kiota-abstractions-go"
)

// MarketsRequestBuilder builds and executes requests for operations under \gamma\markets
type MarketsRequestBuilder struct {
    i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.BaseRequestBuilder
}
// MarketsRequestBuilderGetQueryParameters retrieve markets with comprehensive filtering options
type MarketsRequestBuilderGetQueryParameters struct {
    Active *bool `uriparametername:"active"`
    Archived *bool `uriparametername:"archived"`
    Ascending *bool `uriparametername:"ascending"`
    Closed *bool `uriparametername:"closed"`
    End_date_max *string `uriparametername:"end_date_max"`
    End_date_min *string `uriparametername:"end_date_min"`
    Id []float64 `uriparametername:"id"`
    Limit *float64 `uriparametername:"limit"`
    Offset *float64 `uriparametername:"offset"`
    Order *string `uriparametername:"order"`
    Slug []string `uriparametername:"slug"`
    Sports_market_types []string `uriparametername:"sports_market_types"`
    Start_date_max *string `uriparametername:"start_date_max"`
    Start_date_min *string `uriparametername:"start_date_min"`
    Tag_id *float64 `uriparametername:"tag_id"`
}
// MarketsRequestBuilderGetRequestConfiguration configuration for the request such as headers, query parameters, and middleware options.
type MarketsRequestBuilderGetRequestConfiguration struct {
    // Request headers
    Headers *i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.RequestHeaders
    // Request options
    Options []i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.RequestOption
    // Request query parameters
    QueryParameters *MarketsRequestBuilderGetQueryParameters
}
// ById gets an item from the go-polymarket/client.gamma.markets.item collection
// returns a *MarketsMarketsItemRequestBuilder when successful
func (m *MarketsRequestBuilder) ById(id string)(*MarketsMarketsItemRequestBuilder) {
    urlTplParams := make(map[string]string)
    for idx, item := range m.BaseRequestBuilder.PathParameters {
        urlTplParams[idx] = item
    }
    if id != "" {
        urlTplParams["id"] = id
    }
    return NewMarketsMarketsItemRequestBuilderInternal(urlTplParams, m.BaseRequestBuilder.RequestAdapter)
}
// NewMarketsRequestBuilderInternal instantiates a new MarketsRequestBuilder and sets the default values.
func NewMarketsRequestBuilderInternal(pathParameters map[string]string, requestAdapter i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.RequestAdapter)(*MarketsRequestBuilder) {
    m := &MarketsRequestBuilder{
        BaseRequestBuilder: *i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.NewBaseRequestBuilder(requestAdapter, "{+baseurl}/gamma/markets{?active*,archived*,ascending*,closed*,end_date_max*,end_date_min*,id*,limit*,offset*,order*,slug*,sports_market_types*,start_date_max*,start_date_min*,tag_id*}", pathParameters),
    }
    return m
}
// NewMarketsRequestBuilder instantiates a new MarketsRequestBuilder and sets the default values.
func NewMarketsRequestBuilder(rawUrl string, requestAdapter i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.RequestAdapter)(*MarketsRequestBuilder) {
    urlParams := make(map[string]string)
    urlParams["request-raw-url"] = rawUrl
    return NewMarketsRequestBuilderInternal(urlParams, requestAdapter)
}
// Get retrieve markets with comprehensive filtering options
// returns a []Marketsable when successful
// returns a Markets500Error error when the service returns a 500 status code
func (m *MarketsRequestBuilder) Get(ctx context.Context, requestConfiguration *MarketsRequestBuilderGetRequestConfiguration)([]Marketsable, error) {
    requestInfo, err := m.ToGetRequestInformation(ctx, requestConfiguration);
    if err != nil {
        return nil, err
    }
    errorMapping := i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.ErrorMappings {
        "500": CreateMarkets500ErrorFromDiscriminatorValue,
    }
    res, err := m.BaseRequestBuilder.RequestAdapter.SendCollection(ctx, requestInfo, CreateMarketsFromDiscriminatorValue, errorMapping)
    if err != nil {
        return nil, err
    }
    val := make([]Marketsable, len(res))
    for i, v := range res {
        if v != nil {
            val[i] = v.(Marketsable)
        }
    }
    return val, nil
}
// Slug the slug property
// returns a *MarketsSlugRequestBuilder when successful
func (m *MarketsRequestBuilder) Slug()(*MarketsSlugRequestBuilder) {
    return NewMarketsSlugRequestBuilderInternal(m.BaseRequestBuilder.PathParameters, m.BaseRequestBuilder.RequestAdapter)
}
// ToGetRequestInformation retrieve markets with comprehensive filtering options
// returns a *RequestInformation when successful
func (m *MarketsRequestBuilder) ToGetRequestInformation(ctx context.Context, requestConfiguration *MarketsRequestBuilderGetRequestConfiguration)(*i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.RequestInformation, error) {
    requestInfo := i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.NewRequestInformationWithMethodAndUrlTemplateAndPathParameters(i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.GET, m.BaseRequestBuilder.UrlTemplate, m.BaseRequestBuilder.PathParameters)
    if requestConfiguration != nil {
        if requestConfiguration.QueryParameters != nil {
            requestInfo.AddQueryParameters(*(requestConfiguration.QueryParameters))
        }
        requestInfo.Headers.AddAll(requestConfiguration.Headers)
        requestInfo.AddRequestOptions(requestConfiguration.Options)
    }
    requestInfo.Headers.TryAdd("Accept", "application/json")
    return requestInfo, nil
}
// WithUrl returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
// returns a *MarketsRequestBuilder when successful
func (m *MarketsRequestBuilder) WithUrl(rawUrl string)(*MarketsRequestBuilder) {
    return NewMarketsRequestBuilder(rawUrl, m.BaseRequestBuilder.RequestAdapter);
}
