// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package clob

import (
    "context"
    i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f "github.com/microsoft/kiota-abstractions-go"
    icc42bf7adbb1a6e1ffba61efd8fdb4d941bf8baf44585868780fe6b27d217558 "go-polymarket/client/clob/priceshistory"
)

// PricesHistoryRequestBuilder builds and executes requests for operations under \clob\prices-history
type PricesHistoryRequestBuilder struct {
    i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.BaseRequestBuilder
}
// PricesHistoryRequestBuilderGetQueryParameters retrieve price history for a specific token via market query parameter. Supports interval-based queries (1m, 1h, 6h, 1d, 1w, max) or time range queries. Time ranges can be specified using Unix timestamps (startTs, endTs in seconds) or human-readable dates (startDate, endDate like '2025-08-13' or '2025-08-13T00:00:00.000Z'). Optional fidelity parameter controls data resolution in minutes. Headers x-polymarket-key and x-polymarket-funder are required in production, optional in development (falls back to environment variables).
type PricesHistoryRequestBuilderGetQueryParameters struct {
    EndDate *string `uriparametername:"endDate"`
    EndTs *float64 `uriparametername:"endTs"`
    Fidelity *float64 `uriparametername:"fidelity"`
    // Deprecated: This property is deprecated, use IntervalAsGetIntervalQueryParameterType instead
    Interval *string `uriparametername:"interval"`
    IntervalAsGetIntervalQueryParameterType *icc42bf7adbb1a6e1ffba61efd8fdb4d941bf8baf44585868780fe6b27d217558.GetIntervalQueryParameterType `uriparametername:"interval"`
    Market *string `uriparametername:"market"`
    StartDate *string `uriparametername:"startDate"`
    StartTs *float64 `uriparametername:"startTs"`
}
// PricesHistoryRequestBuilderGetRequestConfiguration configuration for the request such as headers, query parameters, and middleware options.
type PricesHistoryRequestBuilderGetRequestConfiguration struct {
    // Request headers
    Headers *i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.RequestHeaders
    // Request options
    Options []i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.RequestOption
    // Request query parameters
    QueryParameters *PricesHistoryRequestBuilderGetQueryParameters
}
// NewPricesHistoryRequestBuilderInternal instantiates a new PricesHistoryRequestBuilder and sets the default values.
func NewPricesHistoryRequestBuilderInternal(pathParameters map[string]string, requestAdapter i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.RequestAdapter)(*PricesHistoryRequestBuilder) {
    m := &PricesHistoryRequestBuilder{
        BaseRequestBuilder: *i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.NewBaseRequestBuilder(requestAdapter, "{+baseurl}/clob/prices-history?market={market}{&endDate*,endTs*,fidelity*,interval*,startDate*,startTs*}", pathParameters),
    }
    return m
}
// NewPricesHistoryRequestBuilder instantiates a new PricesHistoryRequestBuilder and sets the default values.
func NewPricesHistoryRequestBuilder(rawUrl string, requestAdapter i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.RequestAdapter)(*PricesHistoryRequestBuilder) {
    urlParams := make(map[string]string)
    urlParams["request-raw-url"] = rawUrl
    return NewPricesHistoryRequestBuilderInternal(urlParams, requestAdapter)
}
// Get retrieve price history for a specific token via market query parameter. Supports interval-based queries (1m, 1h, 6h, 1d, 1w, max) or time range queries. Time ranges can be specified using Unix timestamps (startTs, endTs in seconds) or human-readable dates (startDate, endDate like '2025-08-13' or '2025-08-13T00:00:00.000Z'). Optional fidelity parameter controls data resolution in minutes. Headers x-polymarket-key and x-polymarket-funder are required in production, optional in development (falls back to environment variables).
// Deprecated: This method is obsolete. Use GetAsPricesHistoryGetResponse instead.
// returns a PricesHistoryResponseable when successful
// returns a PricesHistory400Error error when the service returns a 400 status code
// returns a PricesHistory500Error error when the service returns a 500 status code
func (m *PricesHistoryRequestBuilder) Get(ctx context.Context, requestConfiguration *PricesHistoryRequestBuilderGetRequestConfiguration)(PricesHistoryResponseable, error) {
    requestInfo, err := m.ToGetRequestInformation(ctx, requestConfiguration);
    if err != nil {
        return nil, err
    }
    errorMapping := i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.ErrorMappings {
        "400": CreatePricesHistory400ErrorFromDiscriminatorValue,
        "500": CreatePricesHistory500ErrorFromDiscriminatorValue,
    }
    res, err := m.BaseRequestBuilder.RequestAdapter.Send(ctx, requestInfo, CreatePricesHistoryResponseFromDiscriminatorValue, errorMapping)
    if err != nil {
        return nil, err
    }
    if res == nil {
        return nil, nil
    }
    return res.(PricesHistoryResponseable), nil
}
// GetAsPricesHistoryGetResponse retrieve price history for a specific token via market query parameter. Supports interval-based queries (1m, 1h, 6h, 1d, 1w, max) or time range queries. Time ranges can be specified using Unix timestamps (startTs, endTs in seconds) or human-readable dates (startDate, endDate like '2025-08-13' or '2025-08-13T00:00:00.000Z'). Optional fidelity parameter controls data resolution in minutes. Headers x-polymarket-key and x-polymarket-funder are required in production, optional in development (falls back to environment variables).
// returns a PricesHistoryGetResponseable when successful
// returns a PricesHistory400Error error when the service returns a 400 status code
// returns a PricesHistory500Error error when the service returns a 500 status code
func (m *PricesHistoryRequestBuilder) GetAsPricesHistoryGetResponse(ctx context.Context, requestConfiguration *PricesHistoryRequestBuilderGetRequestConfiguration)(PricesHistoryGetResponseable, error) {
    requestInfo, err := m.ToGetRequestInformation(ctx, requestConfiguration);
    if err != nil {
        return nil, err
    }
    errorMapping := i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.ErrorMappings {
        "400": CreatePricesHistory400ErrorFromDiscriminatorValue,
        "500": CreatePricesHistory500ErrorFromDiscriminatorValue,
    }
    res, err := m.BaseRequestBuilder.RequestAdapter.Send(ctx, requestInfo, CreatePricesHistoryGetResponseFromDiscriminatorValue, errorMapping)
    if err != nil {
        return nil, err
    }
    if res == nil {
        return nil, nil
    }
    return res.(PricesHistoryGetResponseable), nil
}
// ToGetRequestInformation retrieve price history for a specific token via market query parameter. Supports interval-based queries (1m, 1h, 6h, 1d, 1w, max) or time range queries. Time ranges can be specified using Unix timestamps (startTs, endTs in seconds) or human-readable dates (startDate, endDate like '2025-08-13' or '2025-08-13T00:00:00.000Z'). Optional fidelity parameter controls data resolution in minutes. Headers x-polymarket-key and x-polymarket-funder are required in production, optional in development (falls back to environment variables).
// returns a *RequestInformation when successful
func (m *PricesHistoryRequestBuilder) ToGetRequestInformation(ctx context.Context, requestConfiguration *PricesHistoryRequestBuilderGetRequestConfiguration)(*i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.RequestInformation, error) {
    requestInfo := i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.NewRequestInformationWithMethodAndUrlTemplateAndPathParameters(i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.GET, m.BaseRequestBuilder.UrlTemplate, m.BaseRequestBuilder.PathParameters)
    if requestConfiguration != nil {
        if requestConfiguration.QueryParameters != nil {
            requestInfo.AddQueryParameters(*(requestConfiguration.QueryParameters))
        }
        requestInfo.Headers.AddAll(requestConfiguration.Headers)
        requestInfo.AddRequestOptions(requestConfiguration.Options)
    }
    requestInfo.Headers.TryAdd("Accept", "application/json")
    return requestInfo, nil
}
// WithUrl returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
// returns a *PricesHistoryRequestBuilder when successful
func (m *PricesHistoryRequestBuilder) WithUrl(rawUrl string)(*PricesHistoryRequestBuilder) {
    return NewPricesHistoryRequestBuilder(rawUrl, m.BaseRequestBuilder.RequestAdapter);
}
