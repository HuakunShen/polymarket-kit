// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package clob

import (
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91 "github.com/microsoft/kiota-abstractions-go/serialization"
)

type TradesPostResponse_trades struct {
    // Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
    additionalData map[string]any
    // The asset_id property
    asset_id *string
    // The bucket_index property
    bucket_index *float64
    // The fee_rate_bps property
    fee_rate_bps *string
    // The id property
    id *string
    // The last_update property
    last_update *string
    // The maker_address property
    maker_address *string
    // The market property
    market *string
    // The match_time property
    match_time *string
    // The outcome property
    outcome *string
    // The owner property
    owner *string
    // The price property
    price *string
    // The size property
    size *string
    // The status property
    status *string
    // The taker_order_id property
    taker_order_id *string
}
// NewTradesPostResponse_trades instantiates a new TradesPostResponse_trades and sets the default values.
func NewTradesPostResponse_trades()(*TradesPostResponse_trades) {
    m := &TradesPostResponse_trades{
    }
    m.SetAdditionalData(make(map[string]any))
    return m
}
// CreateTradesPostResponse_tradesFromDiscriminatorValue creates a new instance of the appropriate class based on discriminator value
// returns a Parsable when successful
func CreateTradesPostResponse_tradesFromDiscriminatorValue(parseNode i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable, error) {
    return NewTradesPostResponse_trades(), nil
}
// GetAdditionalData gets the AdditionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
// returns a map[string]any when successful
func (m *TradesPostResponse_trades) GetAdditionalData()(map[string]any) {
    return m.additionalData
}
// GetAssetId gets the asset_id property value. The asset_id property
// returns a *string when successful
func (m *TradesPostResponse_trades) GetAssetId()(*string) {
    return m.asset_id
}
// GetBucketIndex gets the bucket_index property value. The bucket_index property
// returns a *float64 when successful
func (m *TradesPostResponse_trades) GetBucketIndex()(*float64) {
    return m.bucket_index
}
// GetFeeRateBps gets the fee_rate_bps property value. The fee_rate_bps property
// returns a *string when successful
func (m *TradesPostResponse_trades) GetFeeRateBps()(*string) {
    return m.fee_rate_bps
}
// GetFieldDeserializers the deserialization information for the current model
// returns a map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error) when successful
func (m *TradesPostResponse_trades) GetFieldDeserializers()(map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error)) {
    res := make(map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error))
    res["asset_id"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetAssetId(val)
        }
        return nil
    }
    res["bucket_index"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetFloat64Value()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetBucketIndex(val)
        }
        return nil
    }
    res["fee_rate_bps"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetFeeRateBps(val)
        }
        return nil
    }
    res["id"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetId(val)
        }
        return nil
    }
    res["last_update"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetLastUpdate(val)
        }
        return nil
    }
    res["maker_address"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetMakerAddress(val)
        }
        return nil
    }
    res["market"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetMarket(val)
        }
        return nil
    }
    res["match_time"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetMatchTime(val)
        }
        return nil
    }
    res["outcome"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetOutcome(val)
        }
        return nil
    }
    res["owner"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetOwner(val)
        }
        return nil
    }
    res["price"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetPrice(val)
        }
        return nil
    }
    res["size"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetSize(val)
        }
        return nil
    }
    res["status"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetStatus(val)
        }
        return nil
    }
    res["taker_order_id"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetTakerOrderId(val)
        }
        return nil
    }
    return res
}
// GetId gets the id property value. The id property
// returns a *string when successful
func (m *TradesPostResponse_trades) GetId()(*string) {
    return m.id
}
// GetLastUpdate gets the last_update property value. The last_update property
// returns a *string when successful
func (m *TradesPostResponse_trades) GetLastUpdate()(*string) {
    return m.last_update
}
// GetMakerAddress gets the maker_address property value. The maker_address property
// returns a *string when successful
func (m *TradesPostResponse_trades) GetMakerAddress()(*string) {
    return m.maker_address
}
// GetMarket gets the market property value. The market property
// returns a *string when successful
func (m *TradesPostResponse_trades) GetMarket()(*string) {
    return m.market
}
// GetMatchTime gets the match_time property value. The match_time property
// returns a *string when successful
func (m *TradesPostResponse_trades) GetMatchTime()(*string) {
    return m.match_time
}
// GetOutcome gets the outcome property value. The outcome property
// returns a *string when successful
func (m *TradesPostResponse_trades) GetOutcome()(*string) {
    return m.outcome
}
// GetOwner gets the owner property value. The owner property
// returns a *string when successful
func (m *TradesPostResponse_trades) GetOwner()(*string) {
    return m.owner
}
// GetPrice gets the price property value. The price property
// returns a *string when successful
func (m *TradesPostResponse_trades) GetPrice()(*string) {
    return m.price
}
// GetSize gets the size property value. The size property
// returns a *string when successful
func (m *TradesPostResponse_trades) GetSize()(*string) {
    return m.size
}
// GetStatus gets the status property value. The status property
// returns a *string when successful
func (m *TradesPostResponse_trades) GetStatus()(*string) {
    return m.status
}
// GetTakerOrderId gets the taker_order_id property value. The taker_order_id property
// returns a *string when successful
func (m *TradesPostResponse_trades) GetTakerOrderId()(*string) {
    return m.taker_order_id
}
// Serialize serializes information the current object
func (m *TradesPostResponse_trades) Serialize(writer i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.SerializationWriter)(error) {
    {
        err := writer.WriteStringValue("asset_id", m.GetAssetId())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteFloat64Value("bucket_index", m.GetBucketIndex())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteStringValue("fee_rate_bps", m.GetFeeRateBps())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteStringValue("id", m.GetId())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteStringValue("last_update", m.GetLastUpdate())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteStringValue("maker_address", m.GetMakerAddress())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteStringValue("market", m.GetMarket())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteStringValue("match_time", m.GetMatchTime())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteStringValue("outcome", m.GetOutcome())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteStringValue("owner", m.GetOwner())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteStringValue("price", m.GetPrice())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteStringValue("size", m.GetSize())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteStringValue("status", m.GetStatus())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteStringValue("taker_order_id", m.GetTakerOrderId())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteAdditionalData(m.GetAdditionalData())
        if err != nil {
            return err
        }
    }
    return nil
}
// SetAdditionalData sets the AdditionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
func (m *TradesPostResponse_trades) SetAdditionalData(value map[string]any)() {
    m.additionalData = value
}
// SetAssetId sets the asset_id property value. The asset_id property
func (m *TradesPostResponse_trades) SetAssetId(value *string)() {
    m.asset_id = value
}
// SetBucketIndex sets the bucket_index property value. The bucket_index property
func (m *TradesPostResponse_trades) SetBucketIndex(value *float64)() {
    m.bucket_index = value
}
// SetFeeRateBps sets the fee_rate_bps property value. The fee_rate_bps property
func (m *TradesPostResponse_trades) SetFeeRateBps(value *string)() {
    m.fee_rate_bps = value
}
// SetId sets the id property value. The id property
func (m *TradesPostResponse_trades) SetId(value *string)() {
    m.id = value
}
// SetLastUpdate sets the last_update property value. The last_update property
func (m *TradesPostResponse_trades) SetLastUpdate(value *string)() {
    m.last_update = value
}
// SetMakerAddress sets the maker_address property value. The maker_address property
func (m *TradesPostResponse_trades) SetMakerAddress(value *string)() {
    m.maker_address = value
}
// SetMarket sets the market property value. The market property
func (m *TradesPostResponse_trades) SetMarket(value *string)() {
    m.market = value
}
// SetMatchTime sets the match_time property value. The match_time property
func (m *TradesPostResponse_trades) SetMatchTime(value *string)() {
    m.match_time = value
}
// SetOutcome sets the outcome property value. The outcome property
func (m *TradesPostResponse_trades) SetOutcome(value *string)() {
    m.outcome = value
}
// SetOwner sets the owner property value. The owner property
func (m *TradesPostResponse_trades) SetOwner(value *string)() {
    m.owner = value
}
// SetPrice sets the price property value. The price property
func (m *TradesPostResponse_trades) SetPrice(value *string)() {
    m.price = value
}
// SetSize sets the size property value. The size property
func (m *TradesPostResponse_trades) SetSize(value *string)() {
    m.size = value
}
// SetStatus sets the status property value. The status property
func (m *TradesPostResponse_trades) SetStatus(value *string)() {
    m.status = value
}
// SetTakerOrderId sets the taker_order_id property value. The taker_order_id property
func (m *TradesPostResponse_trades) SetTakerOrderId(value *string)() {
    m.taker_order_id = value
}
type TradesPostResponse_tradesable interface {
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.AdditionalDataHolder
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable
    GetAssetId()(*string)
    GetBucketIndex()(*float64)
    GetFeeRateBps()(*string)
    GetId()(*string)
    GetLastUpdate()(*string)
    GetMakerAddress()(*string)
    GetMarket()(*string)
    GetMatchTime()(*string)
    GetOutcome()(*string)
    GetOwner()(*string)
    GetPrice()(*string)
    GetSize()(*string)
    GetStatus()(*string)
    GetTakerOrderId()(*string)
    SetAssetId(value *string)()
    SetBucketIndex(value *float64)()
    SetFeeRateBps(value *string)()
    SetId(value *string)()
    SetLastUpdate(value *string)()
    SetMakerAddress(value *string)()
    SetMarket(value *string)()
    SetMatchTime(value *string)()
    SetOutcome(value *string)()
    SetOwner(value *string)()
    SetPrice(value *string)()
    SetSize(value *string)()
    SetStatus(value *string)()
    SetTakerOrderId(value *string)()
}
