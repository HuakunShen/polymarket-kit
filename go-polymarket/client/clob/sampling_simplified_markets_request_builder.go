// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package clob

import (
    "context"
    i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f "github.com/microsoft/kiota-abstractions-go"
)

// SamplingSimplifiedMarketsRequestBuilder builds and executes requests for operations under \clob\sampling-simplified-markets
type SamplingSimplifiedMarketsRequestBuilder struct {
    i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.BaseRequestBuilder
}
// SamplingSimplifiedMarketsRequestBuilderGetQueryParameters get paginated list of sampling simplified markets. Optional next_cursor for pagination. Headers x-polymarket-key and x-polymarket-funder are required in production, optional in development (falls back to environment variables).
type SamplingSimplifiedMarketsRequestBuilderGetQueryParameters struct {
    Next_cursor *string `uriparametername:"next_cursor"`
}
// SamplingSimplifiedMarketsRequestBuilderGetRequestConfiguration configuration for the request such as headers, query parameters, and middleware options.
type SamplingSimplifiedMarketsRequestBuilderGetRequestConfiguration struct {
    // Request headers
    Headers *i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.RequestHeaders
    // Request options
    Options []i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.RequestOption
    // Request query parameters
    QueryParameters *SamplingSimplifiedMarketsRequestBuilderGetQueryParameters
}
// NewSamplingSimplifiedMarketsRequestBuilderInternal instantiates a new SamplingSimplifiedMarketsRequestBuilder and sets the default values.
func NewSamplingSimplifiedMarketsRequestBuilderInternal(pathParameters map[string]string, requestAdapter i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.RequestAdapter)(*SamplingSimplifiedMarketsRequestBuilder) {
    m := &SamplingSimplifiedMarketsRequestBuilder{
        BaseRequestBuilder: *i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.NewBaseRequestBuilder(requestAdapter, "{+baseurl}/clob/sampling-simplified-markets{?next_cursor*}", pathParameters),
    }
    return m
}
// NewSamplingSimplifiedMarketsRequestBuilder instantiates a new SamplingSimplifiedMarketsRequestBuilder and sets the default values.
func NewSamplingSimplifiedMarketsRequestBuilder(rawUrl string, requestAdapter i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.RequestAdapter)(*SamplingSimplifiedMarketsRequestBuilder) {
    urlParams := make(map[string]string)
    urlParams["request-raw-url"] = rawUrl
    return NewSamplingSimplifiedMarketsRequestBuilderInternal(urlParams, requestAdapter)
}
// Get get paginated list of sampling simplified markets. Optional next_cursor for pagination. Headers x-polymarket-key and x-polymarket-funder are required in production, optional in development (falls back to environment variables).
// Deprecated: This method is obsolete. Use GetAsSamplingSimplifiedMarketsGetResponse instead.
// returns a SamplingSimplifiedMarketsResponseable when successful
// returns a SamplingSimplifiedMarkets400Error error when the service returns a 400 status code
// returns a SamplingSimplifiedMarkets500Error error when the service returns a 500 status code
func (m *SamplingSimplifiedMarketsRequestBuilder) Get(ctx context.Context, requestConfiguration *SamplingSimplifiedMarketsRequestBuilderGetRequestConfiguration)(SamplingSimplifiedMarketsResponseable, error) {
    requestInfo, err := m.ToGetRequestInformation(ctx, requestConfiguration);
    if err != nil {
        return nil, err
    }
    errorMapping := i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.ErrorMappings {
        "400": CreateSamplingSimplifiedMarkets400ErrorFromDiscriminatorValue,
        "500": CreateSamplingSimplifiedMarkets500ErrorFromDiscriminatorValue,
    }
    res, err := m.BaseRequestBuilder.RequestAdapter.Send(ctx, requestInfo, CreateSamplingSimplifiedMarketsResponseFromDiscriminatorValue, errorMapping)
    if err != nil {
        return nil, err
    }
    if res == nil {
        return nil, nil
    }
    return res.(SamplingSimplifiedMarketsResponseable), nil
}
// GetAsSamplingSimplifiedMarketsGetResponse get paginated list of sampling simplified markets. Optional next_cursor for pagination. Headers x-polymarket-key and x-polymarket-funder are required in production, optional in development (falls back to environment variables).
// returns a SamplingSimplifiedMarketsGetResponseable when successful
// returns a SamplingSimplifiedMarkets400Error error when the service returns a 400 status code
// returns a SamplingSimplifiedMarkets500Error error when the service returns a 500 status code
func (m *SamplingSimplifiedMarketsRequestBuilder) GetAsSamplingSimplifiedMarketsGetResponse(ctx context.Context, requestConfiguration *SamplingSimplifiedMarketsRequestBuilderGetRequestConfiguration)(SamplingSimplifiedMarketsGetResponseable, error) {
    requestInfo, err := m.ToGetRequestInformation(ctx, requestConfiguration);
    if err != nil {
        return nil, err
    }
    errorMapping := i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.ErrorMappings {
        "400": CreateSamplingSimplifiedMarkets400ErrorFromDiscriminatorValue,
        "500": CreateSamplingSimplifiedMarkets500ErrorFromDiscriminatorValue,
    }
    res, err := m.BaseRequestBuilder.RequestAdapter.Send(ctx, requestInfo, CreateSamplingSimplifiedMarketsGetResponseFromDiscriminatorValue, errorMapping)
    if err != nil {
        return nil, err
    }
    if res == nil {
        return nil, nil
    }
    return res.(SamplingSimplifiedMarketsGetResponseable), nil
}
// ToGetRequestInformation get paginated list of sampling simplified markets. Optional next_cursor for pagination. Headers x-polymarket-key and x-polymarket-funder are required in production, optional in development (falls back to environment variables).
// returns a *RequestInformation when successful
func (m *SamplingSimplifiedMarketsRequestBuilder) ToGetRequestInformation(ctx context.Context, requestConfiguration *SamplingSimplifiedMarketsRequestBuilderGetRequestConfiguration)(*i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.RequestInformation, error) {
    requestInfo := i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.NewRequestInformationWithMethodAndUrlTemplateAndPathParameters(i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.GET, m.BaseRequestBuilder.UrlTemplate, m.BaseRequestBuilder.PathParameters)
    if requestConfiguration != nil {
        if requestConfiguration.QueryParameters != nil {
            requestInfo.AddQueryParameters(*(requestConfiguration.QueryParameters))
        }
        requestInfo.Headers.AddAll(requestConfiguration.Headers)
        requestInfo.AddRequestOptions(requestConfiguration.Options)
    }
    requestInfo.Headers.TryAdd("Accept", "application/json")
    return requestInfo, nil
}
// WithUrl returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
// returns a *SamplingSimplifiedMarketsRequestBuilder when successful
func (m *SamplingSimplifiedMarketsRequestBuilder) WithUrl(rawUrl string)(*SamplingSimplifiedMarketsRequestBuilder) {
    return NewSamplingSimplifiedMarketsRequestBuilder(rawUrl, m.BaseRequestBuilder.RequestAdapter);
}
