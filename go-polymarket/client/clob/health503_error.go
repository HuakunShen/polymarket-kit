// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package clob

import (
    i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f "github.com/microsoft/kiota-abstractions-go"
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91 "github.com/microsoft/kiota-abstractions-go/serialization"
)

type Health503Error struct {
    i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.ApiError
    // Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
    additionalData map[string]any
    // The clob property
    clob *string
    // The error property
    errorEscaped *string
    // The status property
    status *string
    // The timestamp property
    timestamp *string
}
// NewHealth503Error instantiates a new Health503Error and sets the default values.
func NewHealth503Error()(*Health503Error) {
    m := &Health503Error{
        ApiError: *i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.NewApiError(),
    }
    m.SetAdditionalData(make(map[string]any))
    return m
}
// CreateHealth503ErrorFromDiscriminatorValue creates a new instance of the appropriate class based on discriminator value
// returns a Parsable when successful
func CreateHealth503ErrorFromDiscriminatorValue(parseNode i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable, error) {
    return NewHealth503Error(), nil
}
// Error the primary error message.
// returns a string when successful
func (m *Health503Error) Error()(string) {
    return m.ApiError.Error()
}
// GetAdditionalData gets the AdditionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
// returns a map[string]any when successful
func (m *Health503Error) GetAdditionalData()(map[string]any) {
    return m.additionalData
}
// GetClob gets the clob property value. The clob property
// returns a *string when successful
func (m *Health503Error) GetClob()(*string) {
    return m.clob
}
// GetErrorEscaped gets the error property value. The error property
// returns a *string when successful
func (m *Health503Error) GetErrorEscaped()(*string) {
    return m.errorEscaped
}
// GetFieldDeserializers the deserialization information for the current model
// returns a map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error) when successful
func (m *Health503Error) GetFieldDeserializers()(map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error)) {
    res := make(map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error))
    res["clob"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetClob(val)
        }
        return nil
    }
    res["error"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetErrorEscaped(val)
        }
        return nil
    }
    res["status"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetStatus(val)
        }
        return nil
    }
    res["timestamp"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetTimestamp(val)
        }
        return nil
    }
    return res
}
// GetStatus gets the status property value. The status property
// returns a *string when successful
func (m *Health503Error) GetStatus()(*string) {
    return m.status
}
// GetTimestamp gets the timestamp property value. The timestamp property
// returns a *string when successful
func (m *Health503Error) GetTimestamp()(*string) {
    return m.timestamp
}
// Serialize serializes information the current object
func (m *Health503Error) Serialize(writer i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.SerializationWriter)(error) {
    {
        err := writer.WriteStringValue("clob", m.GetClob())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteStringValue("error", m.GetErrorEscaped())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteStringValue("status", m.GetStatus())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteStringValue("timestamp", m.GetTimestamp())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteAdditionalData(m.GetAdditionalData())
        if err != nil {
            return err
        }
    }
    return nil
}
// SetAdditionalData sets the AdditionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
func (m *Health503Error) SetAdditionalData(value map[string]any)() {
    m.additionalData = value
}
// SetClob sets the clob property value. The clob property
func (m *Health503Error) SetClob(value *string)() {
    m.clob = value
}
// SetErrorEscaped sets the error property value. The error property
func (m *Health503Error) SetErrorEscaped(value *string)() {
    m.errorEscaped = value
}
// SetStatus sets the status property value. The status property
func (m *Health503Error) SetStatus(value *string)() {
    m.status = value
}
// SetTimestamp sets the timestamp property value. The timestamp property
func (m *Health503Error) SetTimestamp(value *string)() {
    m.timestamp = value
}
type Health503Errorable interface {
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.AdditionalDataHolder
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable
    GetClob()(*string)
    GetErrorEscaped()(*string)
    GetStatus()(*string)
    GetTimestamp()(*string)
    SetClob(value *string)()
    SetErrorEscaped(value *string)()
    SetStatus(value *string)()
    SetTimestamp(value *string)()
}
