// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package clob

import (
    "context"
    i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f "github.com/microsoft/kiota-abstractions-go"
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91 "github.com/microsoft/kiota-abstractions-go/serialization"
)

// SpreadsRequestBuilder builds and executes requests for operations under \clob\spreads
type SpreadsRequestBuilder struct {
    i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.BaseRequestBuilder
}
// SpreadsRequestBuilderPostRequestConfiguration configuration for the request such as headers, query parameters, and middleware options.
type SpreadsRequestBuilderPostRequestConfiguration struct {
    // Request headers
    Headers *i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.RequestHeaders
    // Request options
    Options []i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.RequestOption
}
// NewSpreadsRequestBuilderInternal instantiates a new SpreadsRequestBuilder and sets the default values.
func NewSpreadsRequestBuilderInternal(pathParameters map[string]string, requestAdapter i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.RequestAdapter)(*SpreadsRequestBuilder) {
    m := &SpreadsRequestBuilder{
        BaseRequestBuilder: *i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.NewBaseRequestBuilder(requestAdapter, "{+baseurl}/clob/spreads", pathParameters),
    }
    return m
}
// NewSpreadsRequestBuilder instantiates a new SpreadsRequestBuilder and sets the default values.
func NewSpreadsRequestBuilder(rawUrl string, requestAdapter i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.RequestAdapter)(*SpreadsRequestBuilder) {
    urlParams := make(map[string]string)
    urlParams["request-raw-url"] = rawUrl
    return NewSpreadsRequestBuilderInternal(urlParams, requestAdapter)
}
// Post get bid-ask spreads for multiple token IDs. Each item should include token_id. Headers x-polymarket-key and x-polymarket-funder are required in production, optional in development (falls back to environment variables).
// Deprecated: This method is obsolete. Use PostAsSpreadsPostResponse instead.
// returns a SpreadsResponseable when successful
// returns a Spreads400Error error when the service returns a 400 status code
// returns a Spreads500Error error when the service returns a 500 status code
func (m *SpreadsRequestBuilder) Post(ctx context.Context, body []Spreadsable, requestConfiguration *SpreadsRequestBuilderPostRequestConfiguration)(SpreadsResponseable, error) {
    requestInfo, err := m.ToPostRequestInformation(ctx, body, requestConfiguration);
    if err != nil {
        return nil, err
    }
    errorMapping := i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.ErrorMappings {
        "400": CreateSpreads400ErrorFromDiscriminatorValue,
        "500": CreateSpreads500ErrorFromDiscriminatorValue,
    }
    res, err := m.BaseRequestBuilder.RequestAdapter.Send(ctx, requestInfo, CreateSpreadsResponseFromDiscriminatorValue, errorMapping)
    if err != nil {
        return nil, err
    }
    if res == nil {
        return nil, nil
    }
    return res.(SpreadsResponseable), nil
}
// PostAsSpreadsPostResponse get bid-ask spreads for multiple token IDs. Each item should include token_id. Headers x-polymarket-key and x-polymarket-funder are required in production, optional in development (falls back to environment variables).
// returns a SpreadsPostResponseable when successful
// returns a Spreads400Error error when the service returns a 400 status code
// returns a Spreads500Error error when the service returns a 500 status code
func (m *SpreadsRequestBuilder) PostAsSpreadsPostResponse(ctx context.Context, body []Spreadsable, requestConfiguration *SpreadsRequestBuilderPostRequestConfiguration)(SpreadsPostResponseable, error) {
    requestInfo, err := m.ToPostRequestInformation(ctx, body, requestConfiguration);
    if err != nil {
        return nil, err
    }
    errorMapping := i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.ErrorMappings {
        "400": CreateSpreads400ErrorFromDiscriminatorValue,
        "500": CreateSpreads500ErrorFromDiscriminatorValue,
    }
    res, err := m.BaseRequestBuilder.RequestAdapter.Send(ctx, requestInfo, CreateSpreadsPostResponseFromDiscriminatorValue, errorMapping)
    if err != nil {
        return nil, err
    }
    if res == nil {
        return nil, nil
    }
    return res.(SpreadsPostResponseable), nil
}
// ToPostRequestInformation get bid-ask spreads for multiple token IDs. Each item should include token_id. Headers x-polymarket-key and x-polymarket-funder are required in production, optional in development (falls back to environment variables).
// returns a *RequestInformation when successful
func (m *SpreadsRequestBuilder) ToPostRequestInformation(ctx context.Context, body []Spreadsable, requestConfiguration *SpreadsRequestBuilderPostRequestConfiguration)(*i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.RequestInformation, error) {
    requestInfo := i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.NewRequestInformationWithMethodAndUrlTemplateAndPathParameters(i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.POST, m.BaseRequestBuilder.UrlTemplate, m.BaseRequestBuilder.PathParameters)
    if requestConfiguration != nil {
        requestInfo.Headers.AddAll(requestConfiguration.Headers)
        requestInfo.AddRequestOptions(requestConfiguration.Options)
    }
    requestInfo.Headers.TryAdd("Accept", "application/json")
    cast := make([]i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable, len(body))
    for i, v := range body {
        if v != nil {
            cast[i] = v.(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable)
        }
    }
    err := requestInfo.SetContentFromParsableCollection(ctx, m.BaseRequestBuilder.RequestAdapter, "application/json", cast)
    if err != nil {
        return nil, err
    }
    return requestInfo, nil
}
// WithUrl returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
// returns a *SpreadsRequestBuilder when successful
func (m *SpreadsRequestBuilder) WithUrl(rawUrl string)(*SpreadsRequestBuilder) {
    return NewSpreadsRequestBuilder(rawUrl, m.BaseRequestBuilder.RequestAdapter);
}
