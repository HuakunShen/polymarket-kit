// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package clob

import (
    "context"
    i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f "github.com/microsoft/kiota-abstractions-go"
)

// CacheRequestBuilder builds and executes requests for operations under \clob\cache
type CacheRequestBuilder struct {
    i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.BaseRequestBuilder
}
// CacheRequestBuilderDeleteRequestConfiguration configuration for the request such as headers, query parameters, and middleware options.
type CacheRequestBuilderDeleteRequestConfiguration struct {
    // Request headers
    Headers *i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.RequestHeaders
    // Request options
    Options []i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.RequestOption
}
// NewCacheRequestBuilderInternal instantiates a new CacheRequestBuilder and sets the default values.
func NewCacheRequestBuilderInternal(pathParameters map[string]string, requestAdapter i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.RequestAdapter)(*CacheRequestBuilder) {
    m := &CacheRequestBuilder{
        BaseRequestBuilder: *i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.NewBaseRequestBuilder(requestAdapter, "{+baseurl}/clob/cache", pathParameters),
    }
    return m
}
// NewCacheRequestBuilder instantiates a new CacheRequestBuilder and sets the default values.
func NewCacheRequestBuilder(rawUrl string, requestAdapter i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.RequestAdapter)(*CacheRequestBuilder) {
    urlParams := make(map[string]string)
    urlParams["request-raw-url"] = rawUrl
    return NewCacheRequestBuilderInternal(urlParams, requestAdapter)
}
// Delete clear all cached SDK instances and CLOB clients. Useful for debugging or forced refresh.
// Deprecated: This method is obsolete. Use DeleteAsCacheDeleteResponse instead.
// returns a CacheResponseable when successful
func (m *CacheRequestBuilder) Delete(ctx context.Context, requestConfiguration *CacheRequestBuilderDeleteRequestConfiguration)(CacheResponseable, error) {
    requestInfo, err := m.ToDeleteRequestInformation(ctx, requestConfiguration);
    if err != nil {
        return nil, err
    }
    res, err := m.BaseRequestBuilder.RequestAdapter.Send(ctx, requestInfo, CreateCacheResponseFromDiscriminatorValue, nil)
    if err != nil {
        return nil, err
    }
    if res == nil {
        return nil, nil
    }
    return res.(CacheResponseable), nil
}
// DeleteAsCacheDeleteResponse clear all cached SDK instances and CLOB clients. Useful for debugging or forced refresh.
// returns a CacheDeleteResponseable when successful
func (m *CacheRequestBuilder) DeleteAsCacheDeleteResponse(ctx context.Context, requestConfiguration *CacheRequestBuilderDeleteRequestConfiguration)(CacheDeleteResponseable, error) {
    requestInfo, err := m.ToDeleteRequestInformation(ctx, requestConfiguration);
    if err != nil {
        return nil, err
    }
    res, err := m.BaseRequestBuilder.RequestAdapter.Send(ctx, requestInfo, CreateCacheDeleteResponseFromDiscriminatorValue, nil)
    if err != nil {
        return nil, err
    }
    if res == nil {
        return nil, nil
    }
    return res.(CacheDeleteResponseable), nil
}
// Stats the stats property
// returns a *CacheStatsRequestBuilder when successful
func (m *CacheRequestBuilder) Stats()(*CacheStatsRequestBuilder) {
    return NewCacheStatsRequestBuilderInternal(m.BaseRequestBuilder.PathParameters, m.BaseRequestBuilder.RequestAdapter)
}
// ToDeleteRequestInformation clear all cached SDK instances and CLOB clients. Useful for debugging or forced refresh.
// returns a *RequestInformation when successful
func (m *CacheRequestBuilder) ToDeleteRequestInformation(ctx context.Context, requestConfiguration *CacheRequestBuilderDeleteRequestConfiguration)(*i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.RequestInformation, error) {
    requestInfo := i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.NewRequestInformationWithMethodAndUrlTemplateAndPathParameters(i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.DELETE, m.BaseRequestBuilder.UrlTemplate, m.BaseRequestBuilder.PathParameters)
    if requestConfiguration != nil {
        requestInfo.Headers.AddAll(requestConfiguration.Headers)
        requestInfo.AddRequestOptions(requestConfiguration.Options)
    }
    requestInfo.Headers.TryAdd("Accept", "application/json")
    return requestInfo, nil
}
// WithUrl returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
// returns a *CacheRequestBuilder when successful
func (m *CacheRequestBuilder) WithUrl(rawUrl string)(*CacheRequestBuilder) {
    return NewCacheRequestBuilder(rawUrl, m.BaseRequestBuilder.RequestAdapter);
}
