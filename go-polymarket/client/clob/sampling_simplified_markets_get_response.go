// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package clob

import (
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91 "github.com/microsoft/kiota-abstractions-go/serialization"
)

type SamplingSimplifiedMarketsGetResponse struct {
    // Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
    additionalData map[string]any
    // The count property
    count *float64
    // The data property
    data i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.UntypedNodeable
    // The limit property
    limit *float64
    // The next_cursor property
    next_cursor *string
}
// NewSamplingSimplifiedMarketsGetResponse instantiates a new SamplingSimplifiedMarketsGetResponse and sets the default values.
func NewSamplingSimplifiedMarketsGetResponse()(*SamplingSimplifiedMarketsGetResponse) {
    m := &SamplingSimplifiedMarketsGetResponse{
    }
    m.SetAdditionalData(make(map[string]any))
    return m
}
// CreateSamplingSimplifiedMarketsGetResponseFromDiscriminatorValue creates a new instance of the appropriate class based on discriminator value
// returns a Parsable when successful
func CreateSamplingSimplifiedMarketsGetResponseFromDiscriminatorValue(parseNode i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable, error) {
    return NewSamplingSimplifiedMarketsGetResponse(), nil
}
// GetAdditionalData gets the AdditionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
// returns a map[string]any when successful
func (m *SamplingSimplifiedMarketsGetResponse) GetAdditionalData()(map[string]any) {
    return m.additionalData
}
// GetCount gets the count property value. The count property
// returns a *float64 when successful
func (m *SamplingSimplifiedMarketsGetResponse) GetCount()(*float64) {
    return m.count
}
// GetData gets the data property value. The data property
// returns a UntypedNodeable when successful
func (m *SamplingSimplifiedMarketsGetResponse) GetData()(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.UntypedNodeable) {
    return m.data
}
// GetFieldDeserializers the deserialization information for the current model
// returns a map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error) when successful
func (m *SamplingSimplifiedMarketsGetResponse) GetFieldDeserializers()(map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error)) {
    res := make(map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error))
    res["count"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetFloat64Value()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetCount(val)
        }
        return nil
    }
    res["data"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetObjectValue(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.CreateUntypedNodeFromDiscriminatorValue)
        if err != nil {
            return err
        }
        if val != nil {
            m.SetData(val.(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.UntypedNodeable))
        }
        return nil
    }
    res["limit"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetFloat64Value()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetLimit(val)
        }
        return nil
    }
    res["next_cursor"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetNextCursor(val)
        }
        return nil
    }
    return res
}
// GetLimit gets the limit property value. The limit property
// returns a *float64 when successful
func (m *SamplingSimplifiedMarketsGetResponse) GetLimit()(*float64) {
    return m.limit
}
// GetNextCursor gets the next_cursor property value. The next_cursor property
// returns a *string when successful
func (m *SamplingSimplifiedMarketsGetResponse) GetNextCursor()(*string) {
    return m.next_cursor
}
// Serialize serializes information the current object
func (m *SamplingSimplifiedMarketsGetResponse) Serialize(writer i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.SerializationWriter)(error) {
    {
        err := writer.WriteFloat64Value("count", m.GetCount())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteObjectValue("data", m.GetData())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteFloat64Value("limit", m.GetLimit())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteStringValue("next_cursor", m.GetNextCursor())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteAdditionalData(m.GetAdditionalData())
        if err != nil {
            return err
        }
    }
    return nil
}
// SetAdditionalData sets the AdditionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
func (m *SamplingSimplifiedMarketsGetResponse) SetAdditionalData(value map[string]any)() {
    m.additionalData = value
}
// SetCount sets the count property value. The count property
func (m *SamplingSimplifiedMarketsGetResponse) SetCount(value *float64)() {
    m.count = value
}
// SetData sets the data property value. The data property
func (m *SamplingSimplifiedMarketsGetResponse) SetData(value i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.UntypedNodeable)() {
    m.data = value
}
// SetLimit sets the limit property value. The limit property
func (m *SamplingSimplifiedMarketsGetResponse) SetLimit(value *float64)() {
    m.limit = value
}
// SetNextCursor sets the next_cursor property value. The next_cursor property
func (m *SamplingSimplifiedMarketsGetResponse) SetNextCursor(value *string)() {
    m.next_cursor = value
}
type SamplingSimplifiedMarketsGetResponseable interface {
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.AdditionalDataHolder
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable
    GetCount()(*float64)
    GetData()(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.UntypedNodeable)
    GetLimit()(*float64)
    GetNextCursor()(*string)
    SetCount(value *float64)()
    SetData(value i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.UntypedNodeable)()
    SetLimit(value *float64)()
    SetNextCursor(value *string)()
}
