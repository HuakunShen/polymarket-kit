// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package clob

import (
    "context"
    i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f "github.com/microsoft/kiota-abstractions-go"
)

// PriceItemWithSideItemRequestBuilder builds and executes requests for operations under \clob\price\{tokenId}\{side}
type PriceItemWithSideItemRequestBuilder struct {
    i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.BaseRequestBuilder
}
// PriceItemWithSideItemRequestBuilderGetRequestConfiguration configuration for the request such as headers, query parameters, and middleware options.
type PriceItemWithSideItemRequestBuilderGetRequestConfiguration struct {
    // Request headers
    Headers *i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.RequestHeaders
    // Request options
    Options []i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.RequestOption
}
// NewPriceItemWithSideItemRequestBuilderInternal instantiates a new PriceItemWithSideItemRequestBuilder and sets the default values.
func NewPriceItemWithSideItemRequestBuilderInternal(pathParameters map[string]string, requestAdapter i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.RequestAdapter)(*PriceItemWithSideItemRequestBuilder) {
    m := &PriceItemWithSideItemRequestBuilder{
        BaseRequestBuilder: *i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.NewBaseRequestBuilder(requestAdapter, "{+baseurl}/clob/price/{tokenId}/{side}", pathParameters),
    }
    return m
}
// NewPriceItemWithSideItemRequestBuilder instantiates a new PriceItemWithSideItemRequestBuilder and sets the default values.
func NewPriceItemWithSideItemRequestBuilder(rawUrl string, requestAdapter i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.RequestAdapter)(*PriceItemWithSideItemRequestBuilder) {
    urlParams := make(map[string]string)
    urlParams["request-raw-url"] = rawUrl
    return NewPriceItemWithSideItemRequestBuilderInternal(urlParams, requestAdapter)
}
// Get get the current price for a specific token ID and side (buy/sell). Headers x-polymarket-key and x-polymarket-funder are required in production, optional in development (falls back to environment variables).
// Deprecated: This method is obsolete. Use GetAsWithSideGetResponse instead.
// returns a PriceItemItemWithSideResponseable when successful
// returns a PriceItemItemWithSide400Error error when the service returns a 400 status code
// returns a PriceItemItemWithSide500Error error when the service returns a 500 status code
func (m *PriceItemWithSideItemRequestBuilder) Get(ctx context.Context, requestConfiguration *PriceItemWithSideItemRequestBuilderGetRequestConfiguration)(PriceItemItemWithSideResponseable, error) {
    requestInfo, err := m.ToGetRequestInformation(ctx, requestConfiguration);
    if err != nil {
        return nil, err
    }
    errorMapping := i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.ErrorMappings {
        "400": CreatePriceItemItemWithSide400ErrorFromDiscriminatorValue,
        "500": CreatePriceItemItemWithSide500ErrorFromDiscriminatorValue,
    }
    res, err := m.BaseRequestBuilder.RequestAdapter.Send(ctx, requestInfo, CreatePriceItemItemWithSideResponseFromDiscriminatorValue, errorMapping)
    if err != nil {
        return nil, err
    }
    if res == nil {
        return nil, nil
    }
    return res.(PriceItemItemWithSideResponseable), nil
}
// GetAsWithSideGetResponse get the current price for a specific token ID and side (buy/sell). Headers x-polymarket-key and x-polymarket-funder are required in production, optional in development (falls back to environment variables).
// returns a PriceItemItemWithSideGetResponseable when successful
// returns a PriceItemItemWithSide400Error error when the service returns a 400 status code
// returns a PriceItemItemWithSide500Error error when the service returns a 500 status code
func (m *PriceItemWithSideItemRequestBuilder) GetAsWithSideGetResponse(ctx context.Context, requestConfiguration *PriceItemWithSideItemRequestBuilderGetRequestConfiguration)(PriceItemItemWithSideGetResponseable, error) {
    requestInfo, err := m.ToGetRequestInformation(ctx, requestConfiguration);
    if err != nil {
        return nil, err
    }
    errorMapping := i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.ErrorMappings {
        "400": CreatePriceItemItemWithSide400ErrorFromDiscriminatorValue,
        "500": CreatePriceItemItemWithSide500ErrorFromDiscriminatorValue,
    }
    res, err := m.BaseRequestBuilder.RequestAdapter.Send(ctx, requestInfo, CreatePriceItemItemWithSideGetResponseFromDiscriminatorValue, errorMapping)
    if err != nil {
        return nil, err
    }
    if res == nil {
        return nil, nil
    }
    return res.(PriceItemItemWithSideGetResponseable), nil
}
// ToGetRequestInformation get the current price for a specific token ID and side (buy/sell). Headers x-polymarket-key and x-polymarket-funder are required in production, optional in development (falls back to environment variables).
// returns a *RequestInformation when successful
func (m *PriceItemWithSideItemRequestBuilder) ToGetRequestInformation(ctx context.Context, requestConfiguration *PriceItemWithSideItemRequestBuilderGetRequestConfiguration)(*i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.RequestInformation, error) {
    requestInfo := i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.NewRequestInformationWithMethodAndUrlTemplateAndPathParameters(i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.GET, m.BaseRequestBuilder.UrlTemplate, m.BaseRequestBuilder.PathParameters)
    if requestConfiguration != nil {
        requestInfo.Headers.AddAll(requestConfiguration.Headers)
        requestInfo.AddRequestOptions(requestConfiguration.Options)
    }
    requestInfo.Headers.TryAdd("Accept", "application/json")
    return requestInfo, nil
}
// WithUrl returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
// returns a *PriceItemWithSideItemRequestBuilder when successful
func (m *PriceItemWithSideItemRequestBuilder) WithUrl(rawUrl string)(*PriceItemWithSideItemRequestBuilder) {
    return NewPriceItemWithSideItemRequestBuilder(rawUrl, m.BaseRequestBuilder.RequestAdapter);
}
